Executive Summary
This dissertation is concentrated on the research of e?ciency analysis of block-wise P-
signatures, and the objective of this project is to investigate possible techniques that can
be used to reduce the running time cost of block-wise P-signatures. Overall, this project
contains both theoretical investigation and practical implementation, as well as e?ciency
analysis.
Block-wise P-signatures were recently proposed as a new primitive to achieve non-
interactive anonymous credentials with e?cient attributes, which could be used in a vari-
ety of contexts such as e-Commerces and e-Voting systems. Nonetheless, the introduced
instantiation of block-wise P-signatures are based on symmetric pairings, which is re-
garded to be ine?cient and impractical in implementation. Motivated by this observation
we engage in investigating possible techniques to enhance performance of block-wise P-
signatures.
Wehavereceivedsigniﬁcantprogresstoimprovethee?ciencyofblock-wiseP-signatures
both in theoretical algorithm design and in practical implementation. Our adopting tech-
niques mainly include reconstructing block-wise P-signatures based on asymmetric pair-
ings, as well as adopting pre-computation of pairing elements to speed up pairing compu-
tation. The major achievements are described as follows.
1. We ﬁrstly propose block-wise P-signatures based on asymmetric pairings, which can
be proven secure against forgery attacks, see pages 31-40.
2. Ourproposedblock-wise P-signatures aretheoretically e?ciency whilecomparingwith
Izabach`ene et al.’s original construction, see pages 40-43.
3. We both implement block-wise P-signatures based on symmetric pairings and ones
based on asymmetric pairings using MIRACL Crypto. SDK, and our proposed
schemes achieve enormous e?ciency improvement, see pages 43-46.
4. Based on our proposed schemes, we apply technique of pairing element alignment and
propose an optimized block-wise P-signature scheme, which is also proven secure
against forgery attacks. see pages 47-57.
5. We successfully speed up optimized block-wise P-signatures by adopting techniques
of pairing pre-computation and elements multiplication pre-computation, see pages
57-60.
6. We evaluate the performance of our proposed schemes on ﬁve pairing curves and give
a comprehensive comparison among them, see pages 61-66.
IContents
1 Introduction 1
1.1 Implementation of block-wise P-signatures . . . . . . . . . . . . . . . . . . . 3
1.2 Scope of this dissertation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2 Pairing-based Cryptography 5
2.1 Bilinear pairings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2 Security assumption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.3 Practical issues of pairing implementations . . . . . . . . . . . . . . . . . . 8
2.4 Optimization of pairing-based cryptography . . . . . . . . . . . . . . . . . . 9
3 Review of P-signature Schemes 11
3.1 Groth-Sahai non-interactive proof systems . . . . . . . . . . . . . . . . . . . 11
3.1.1 Groth-Sahai commitment schemes . . . . . . . . . . . . . . . . . . . 13
3.1.2 Groth-Sahai pairing inner product equation and its proof . . . . . . 14
3.1.3 SXDH-based instantiation of Groth-Sahai proofs . . . . . . . . . . . 15
3.2 Single-block P-signature schemes . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.1 F-unforgeable signatures of single-block P-signatures . . . . . . . . . 18
3.2.2 Single-block P-signatures schemes . . . . . . . . . . . . . . . . . . . 19
3.3 Multi-block P-signature schemes . . . . . . . . . . . . . . . . . . . . . . . . 20
3.3.1 F-unforgeable signatures of multi-block P-signatures . . . . . . . . . 20
3.3.2 Multi-block P-signatures schemes . . . . . . . . . . . . . . . . . . . . 21
3.4 Block-wise P-signature schemes . . . . . . . . . . . . . . . . . . . . . . . . 23
3.4.1 Vector commitments of block-wise P-signatures . . . . . . . . . . . . 23
3.4.2 Block-wise P-signatures schemes . . . . . . . . . . . . . . . . . . . . 24
4 Asymmetric Pairing Based Block-wise P-signatures 31
4.1 Block-wise P-signatures based on asymmetric pairings . . . . . . . . . . . . 31
4.2 Security consideration of our proposed block-wise P-signatures . . . . . . . 38
4.3 E?ciency analysis of our proposed block-wise P-signatures . . . . . . . . . . 40
4.3.1 Theoretical analysis of proposed block-wise P-signatures . . . . . . . 41
4.3.2 Practical analysis of asymmetric block-wise P-signatures . . . . . . . 43
III5 Optimization of Block-wise P-signatures 47
5.1 Optimization of our proposed block-wise P-signature . . . . . . . . . . . . . 47
5.1.1 Security consideration of optimized P-signatures . . . . . . . . . . . 56
5.2 E?ciency of optimized block-wise P-signatures . . . . . . . . . . . . . . . . 57
5.2.1 Pairing pre-computation in MIRACL library . . . . . . . . . . . . . 57
5.2.2 Experiment result. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
5.3 Other practical e?ciency analysis of block P-signatures . . . . . . . . . . . 61
5.3.1 E?ciency analysis on di?erent pairing curves . . . . . . . . . . . . . 61
5.3.2 Further e?ciency analysis on BN curves . . . . . . . . . . . . . . . . 62
6 Conclusions 67
6.1 Future work of block-wise P-signatures . . . . . . . . . . . . . . . . . . . . . 68
A Experiment Results 74
A.1 Experiment result of Type-1 pairing based P-signatures . . . . . . . . . . . 74
A.2 Experiment result of Type-3 pairing based P-signatures . . . . . . . . . . . 76
A.3 Experiment result of Optimized P-signatures . . . . . . . . . . . . . . . . . 78
A.4 Experiment result of P-signatures on di?erent curves . . . . . . . . . . . . . 80
IVList of Figures
2.1 Suggested key size of di?erent style of cryptographic primitives [1] . . . . . 8
2.2 Miller’s algorithm [2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
3.1 Groth-Sahai proof system [3] . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.2 Group elements used in SXDH-based Groth-Sahai proof [3] . . . . . . . . . 17
3.3 Group elements used in DLIN-based Groth-Sahai proof [3] . . . . . . . . . . 18
4.1 Elements used inG andG of proposed block-wise P-signatures . . . . . . 38
1 2
4.2 Security reduction from symmetric pairings to asymmetric pairings . . . . . 39
4.3 The number of group elements used in Type-1 pairing-based and Type-3
pairing-based block-wise P-signatures – F-signature part . . . . . . . . . . . 41
4.4 The number of group elements used in Type-1 pairing-based block-wise
P-signatures – Signature proof part[4] . . . . . . . . . . . . . . . . . . . . . 42
4.5 The number of group elements used in Type-3 pairing-based block-wise
P-signatures – Signature proof part . . . . . . . . . . . . . . . . . . . . . . . 42
4.6 E?ciencycomparisonbetweenDLIN-basedandSXDH-basedsignatureproof
generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
4.7 E?ciency comparison between Type-1 pairing based and Type-3 pairing
based block-wise P-signatures (using pairing curves BN-128) . . . . . . . . . 45
5.1 Optimization example – Signature veriﬁcation of block-wise P-signatures
before/after optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
5.2 ElementsusedinG andG ofourproposedoptimizedblock-wiseP-signatures 54
1 2
5.3 Collection of repeated pairingforms inblock-wise P-signatures before/after
optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
5.4 Security reduction from asymmetric pairings P-signatures to optimized P-
signatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
5.5 Comparisonofusedgroupelements before/after optimization –F-signature
part . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
5.6 E?ciencycomparisonofblock-wiseP-signatureswithout/withoptimization
(using pairing curve BN-128) . . . . . . . . . . . . . . . . . . . . . . . . . . 59
5.7 E?ciency comparison among di?erent pairing curves - F-signatures part . . 62
5.8 Detailed data of e?ciency comparison among di?erent pairing curves - F-
signatures part . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
V5.9 E?ciency comparison of block-wise P-signature without/with optimization
(using pairing curve BN-192) . . . . . . . . . . . . . . . . . . . . . . . . . . 64
5.10 Performance comparison of block-wise P-signatures on pairing curves BN-
128 and BN-196 - F-signatures part (please refer x-axis to the ID shows in
Figure 5.9) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.11 Performance comparison of block-wise P-signatures on pairing curves BN-
128 and BN-196 - whole part (please refer x-axis to the ID shows in Figure
5.9) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.12 Comparison of e?ciency enhancement between block-wise P-signatures in
pairing curves BN-128 and BN-196 (please refer x-axis to the ID shows in
Figure 5.9) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.1 Numberofpairingscomputationperproofveriﬁcation,wherenandmstand
for the number of di?erent types of variables. [5] . . . . . . . . . . . . . . . 68
EQ
A.1 Type-1 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . 74
EQ
A.2 Type-1 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . 75
IP
A.3 Type-1 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . 75
IP
A.4 Type-1 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . 75
EQ
A.5 Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . 76
EQ
A.6 Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . 76
IP
A.7 Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . 77
IP
A.8 Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . 77
EQ
A.9 Optimized Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . 78
EQ
A.10Optimized Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . 78
IP
A.11Optimized Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . 79
IP
A.12Optimized Type-3 pairings - caseR=R . . . . . . . . . . . . . . . . . . 79
EQ
A.13CP-80 - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
EQ
A.14MNT-80 - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
EQ
A.15BN-128 - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
EQ
A.16KSS-192 - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
EQ
A.17BLS-256 - caseR=R . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
VIChapter 1
Introduction
Credential systems play important roles in modern society for people to demonstrate the
validity of requested activities. Nowadays an variety of paper-based credentials have been
used in our daily life, such as drivers’ licences, passports, and even tickets for entering
galleries. In electronic world, digital credentials such as national identiﬁcation cards and
Oyster cards have also been the essential tools that people use everyday. To apply for
credentials, in general, people are required to register themselves to trusted organizations,
then credentials will be issued if applicants are qualiﬁed. Credentials which issued by
organizations explicitly shows the applicants’ personal information such as name, birth-
date or home address, as well as the statement of allowed activities. With the issued
credentials, people are allowed to do some activities identiﬁed in the credentials.
Traditionally a simple digital credential system can be constructed on digital signa-
tures. Withoutloss ofgenerality, supposeanapplicanthasregistered toacredential issuer
and both two parties use public-key system. Firstly one applicant sends a digital signa-
ture containing a message to be authorized to one credential issuer. While receiving the
application, the credential issuer checks validity of the applicant’s message by verifying
the received digital signature and then produces a new digital signature which contains
theapplicant’s publickey information andtheappliedmessage. Thenewdigital signature
signed by the credential issuer is then sent back to the applicant. Afterwards, the appli-
cant can present the issued digital signature to a third party and claim the ownership and
the validity of underlying message by verifying the digital signature.
In digital world the above context of digital credential system shows two evident secu-
rityﬂaws. Firstlyitisclearthatbothinthecredentialapplyingstageandinthecredential
proving stage, the message is required to presented in a plaintext form, which is not desir-
able if the underlying message contains private information. Secondly, digital credentials
are replicatable hence a malicious attacker can easily get a replication of one valid digital
credential and play as an imposter on the Internet. Moreover, some further applications
of digital credentials, such as e-cash and digital transactions, can also concern the linkage
issue and the reuse issue of credential proofs. Motivated by the issues of privacy and
anonymity, digital credential systems need to be further reconsidered.
12 CHAPTER 1. Introduction
Anonymous credentials
Anonymous credentials system is one of many solutions to addressprivacy and anonymity
issues of digital credentials. Anonymous credentials, which are ﬁrstly introduced by
Chaum [6], have been widely investigated by cryptographers and received a signiﬁcant
progress [7, 8, 9, 10, 11, 12, 13, 14, 15, 4]. The introduced anonymous credentials systems
are essentially constructed on a variety of digital signatures with two protocols. The ﬁrst
protocol is designed to proceed users’ credential requests in an anonymous manner while
users try to submit both their secret keys and commitments on requested messages to
credential issuers. After operating the ﬁrst protocol, users can get credentials and reveal
neither key information nor requested messages to other protocol participants nor mali-
cious eavesdroppers. In terms of the second protocol, it is designed for users to prove the
knowledge of ownership on credentials to third parties. For example, assume an user pos-
sesses a credential containing a signature (m,?), he can ﬁrstly reveal a commitment c on
the message m and then demonstrate his possession of (c,?) using zero-knowledge proofs
[16], so that third parties cannot learn any information about the message m. Further-
more, anonymous credential systems also provide the property of credential-unlinkability,
which means that eavesdroppers learn nothing even multiple proofs are connected to the
same credential.
Anonymous credentials are theoretically feasible, however, the majority of instanti-
ations are impractical due to the ine?ciency of interactive zero-knowledge proofs [16].
Traditionalinteractivezero-knowledgeproofsaresigniﬁcantlyconstructedonNP-complete
problemssuchasgraphisomorphismproblemsorcircuitsatisﬁabilityproblems. Toachieve
su?cient security degree, NP-reduction mechanism may take an enormous amount of in-
teractionsbetweenproversandveriﬁers,whichisnotpracticalfordeploymentinrealappli-
cations. Although interactive zero-knowledge proofs can be replaced with non-interactive
ones using Fiat-Shamir paradigm [17] and Random Oracle Model [18]; however, this ap-
proach may probably show security ﬂaws while replacing random oracle with real hash
functions [19, 20].
P-signatures
In2008, GrothandSahai[3]suggested anewnon-interactive zero-knowledge proofsystem
(NIZK), which ﬁrstly provides an e?ective proof mechanism to addressthe e?ciency issue
ofzero-knowledge proofs. NotlikeNP-reductionmethodologies, Groth-SahaiNIZKproofs
adopt idea of group-dependent language, which is to to conceal the elements of one cyclic
group by transferring them into another group, and then provide a mathematical relation
to prove the connectivity of these two cyclic groups. Although the new NIZK proofs can
be only used in pairing-based cryptographic primitives, Groth-Sahai NIZK proofs have
provided an opportunity for constructing practical anonymous credential systems.
With the help of Groth-Sahai proofs, P-signatures are introduced to provide solutions
to construct anonymous credentials. P-signatures, which stands for signatures with e?-
cient Protocols, are ﬁrstly introduced by Belenkiy et al. [13] in 2008 and further extended1.1. IMPLEMENTATION OF BLOCK-WISE P-SIGNATURES 3
to supportmulti-block messages [14]. P-signatures can be easily and practically extended
to implement a variety of anonymous credential systems. In general, one P-signature
schemecomprisesaF-unforgeablesignaturescheme, aperfecthidingcommitmentscheme,
and three protocols:
1. An interactive protocol for users to request signatures on commitments of messages
from signature signers.
2. A non-interactive proof for users to prove the validity of signatures without revealing
the underlying messages.
3. A non-interactive protocol for users to prove the equality of two proofs on the same
commitments with di?erent opening values.
1.1 Implementation of block-wise P-signatures
General P-signatures schemes have made a signiﬁcant achievement in providing e?cient
non-interactive protocoltoanonymouscredentials; but,theirdesignscanbeonlydeployed
in general applications based on public-key-centric system. Traditional public-key-centric
systems assume users maintain unique secret keys to represent their digital identities.
However, in real life some emerging web technologies including cloud applications, have
turned to describe web resources or network elements in an attribute-based methodology,
such as eXtensible Markup Language (XML). Not like general messages, it is evident
that the representation of XML is well-structured and can be further processed to ﬁt in
with di?erent applications. Cryptographers [12, 21] have tried to construct attribute-
based anonymous credential systems, but their constructions could not provide e?cient
non-interactive proof. To address this issue, there are three critical points P-signatures
should be considered. It is obvious that the ﬁrst point is to construct attribute-based
P-signatures. The second consideration is to make attributes in P-signatures be capable
of doing some simple logic calculation; for example, deciding if some set of attributes are
containedinthesignatures. Andthelastpointistokeeptheavailability ofnon-interactive
proofs of P-signatures.
In 2011, Izabach`ene et al. [4] proposed a powerful cryptographic primitive called
block-wise P-signatures, to be the response to the above three considerations. Block-
wise P-signatures not only further improve the e?ciency of NIZK proofs of general P-
signatures; more importantly, block-wise P-signatures can supportanonymous credentials
with e?cient attributes. Therefore, block-wise P-signatures may hold high potential to
be the building blocks of cloud credential applications in the future. Due to the impor-
tance of block-wise P-signatures, in our project, we concentrate on the implementation
issue of block-wise P-signatures. An observation on the implementations of block-wise
P-signatures is that they heavily rely on bilinear-pairings computation. Bilinear-pairings
computation may show ine?cient and impractical consequence if the underlying pairings
computation is not treated well. Motivated by this issue, in this dissertation, we concen-
trate on improving the e?ciency of block-wise P-signatures.4 CHAPTER 1. Introduction
1.2 Scope of this dissertation
Thisdissertationaimstocomprehensivelyanalyzethee?ciencyofblock-wiseP-signatures.
The objective of our works is not only on reviewing and discussing the e?ciency of block-
wise P-signatures; more importantly, we concentrate on improving the performance of
block-wiseP-signatureswithpossibleoptimization techniques. InChapter2, weintroduce
the essential mathematical knowledge and security assumptions of bilinear pairings that
willbeusedinthisdissertation. Inaddition,wealsoreviewseveraloptimizationtechniques
thatcouldbeusedtoenhancethee?ciency ofpairing-basedcryptographicschemes. Then
in Chapter 3, we review three introduced P-signature schemes, which are single-block P-
signatures, multi-block P-signatures, and most importantly, block-wise P-signatures. In
Chapter4, weproposeanewblock-wiseP-signatureschemebasedonasymmetricpairings
and analyze both the theoretical performance and the practical performance between our
proposedschemeandIzabach`eneetal.’sconstruction. InChapter5,weapplyoptimization
techniques into our scheme, and an optimized block-wise P-signature scheme is proposed.
Moreover, thefurthere?ciency analysis of applyingoptimization techniques in block-wise
P-signatures is also given in this chapter. Lastly in chapter 6, we evaluate our works
and suggest some future works that could further increase the performance of block-wise
P-signatures.Chapter 2
Pairing-based Cryptography
Bilinear pairingshavebeenoneofmostimportantresearchtopicsinmoderncryptography
sincetheycanbeusedforconstructingavarietyofcryptographicprimitivesthatcannotbe
e?ectivelysolvedingeneralpublic-keysystem. Bilinearpairingsareessentiallyconstructed
on elliptic curves and deﬁne functions that map a pair of elliptic curve points to a ﬁnite
ﬁeld. In the past decade cryptographers utilized bilinear pairings to construct a variety
of cryptographic primitives and protocols. In this chapter we introduce the essential
knowledge of bilinear pairings, as well as some important security assumptions adopted
by P-signatures schemes.
2.1 Bilinear pairings
Without loss of generality, let p be a prime integer. SupposeG ,G ,G be cyclic groups
1 2 T
of order p and can be expressed in multiplicative notation with identity element 1. A
bilinear map fromG ?G toG can be deﬁned as a function
1 2 T
e:G ?G ??G
1 2 T
with three properties.
x y xy
1. Bilinearity: For all u?G , v?G , and x,y?Z, e(u ,v )=e(u,v)
1 2
2. Non-degeneracy: For all g ?G , g ?G be the generators ofG andG , e(g ,g )
1 1 2 2 1 2 1 2
generatesG .
T
3. Computability: There exits an probabilistic polynomial time algorithm to generate
bilinear map (p,G ,G ,G ,e,g ,g ), and for any u? G , v ? G , it is e?cient to
1 2 T 1 2 1 2
compute e(u,v).
Types of pairing implementations
From the bilinear map function e : G ?G ?? G , it describes the pair association of
1 2 T
elements inG andG withelements inG ; hencethistechniqueiscalled bilinear pairings
1 2 T
56 CHAPTER 2. Pairing-based Cryptography
or pairings for short. In general, according to the constructions of bilinear maps, there
are three types of pairing implementations on elliptic curves, which are:
Type-1 pairings: It describes a special form of bilinear maps where G = G , so the
1 2
pairing expression can be written as e:G?G??G . Such the symmetric pairing
T
constructions are widely used in constructing pairing-based cryptographic schemes
because of their concise expressions.
Type-2 pairings: This type of pairing constructions e:G ?G ??G illustrate that
1 2 T
there exits an e?ciently computable homomorphism ? fromG toG .
2 1
Type-3 pairings: This kind of pairing constructions deﬁne e :G ?G ??G where
1 2 T
G 6=G and there exits no e?ciently computable homomorphisms betweenG and
1 2 1
G .
2
Infact, eveninType-3pairings,itisevidentthatthereexistshomomorphismsbetween
G and G since G and G are inherently cyclic groups of the same order. However,
1 2 1 2
computing these homomorphisms may be computationally infeasible. This is the major
di?erence between Type-2 pairings and Type-3 pairings, and up to now there is few im-
plementation of Type-2 pairings. Among theses three types of pairings, the research of
Galbraith et al. [1] shows Type-1 pairings and Type-3 pairings may be the most common
and practical pairing implementations. Moreover, The research of Scott [2] further sug-
gests that Type-3 pairings can show more ﬂexibility and e?ciency than Type-1 pairings.
In this dissertation, we use the terms symmetric pairings and asymmetric pairings to
respectively describe Type-1 pairings and Type-3 pairings, which can clearly distinguish
these two types of pairings from the view of construction di?erence.
2.2 Security assumption
In modern cryptography, in order to theoretically measure the security degree of crypto-
graphic schemes, it is a common methodology to reduce one cryptographic scheme to one
known hardproblem, such as factoring problem, square root problem, or discrete-logarithm
problem. Based on these hard problems, cryptographers have built a variety of security
modelsformeasuringthesecurityofproposedschemes. Intermsofpairing-basedcryptog-
raphy, the majority of proposed schemes are based on well-know Di?e-Hellman problem.
Here we introduce the essential security assumptions of pairings that will be used in this
dissertation.
Group-related security assumptions.
Deﬁnition 2.1. Computational Di?e-Hellman Problem (CDH)
x
Let G be a group of prime order p and g? G be the generator of G. Given a = g and
y ? xy
b =g where x,y?Z , computer c?G such that c=g .
p2.2. SECURITY ASSUMPTION 7
Deﬁnition 2.2. Decisional Di?e-Hellman Problem (DDH)
x y
Let G be a group of prime order p and g?G be the generator ofG. Given a=g , b=g
z ?
and c=g where x,y,z?Z , determine if z =xy.
p
Deﬁnition 2.3. Decisional Linear Problem (DLIN) [22]
x y rx sy r+s
LetGbeagroupofprimeorderpandg?Gbethegenerator ofG. Given(g,g ,g ,g ,g ,g )
x y rx sy z ? z r+s
and (g,g ,g ,g ,g ,g ) where x,y,r,s,z?Z , determine if g =g .
p
Deﬁnition 2.4. q-Hidden Strong Di?e-Hellman Problem (q-HSDH) [24]
x
Let G be a group of prime order p and g?G be the generator of G. Given g,u,g ?G,
1/(x+c ) c c ? 1/(x+c) c c
i i i
and{g ,g ,u } where x,c ,...,c ?Z , output a new tuple (g ,g ,u ).
i=1...q 1 q
p
Deﬁnition 2.5. Flexible Di?e-Hellman Problem (FlexDH) [4]
x y
Let G be a group of prime order p and g? G be the generator of G. Given (g,g ,g )
? ? ?x ?xy
where x,y?Z , ﬁnd a triple (g ,g ,g ) such that ?6=0.
p
Deﬁnition 2.6. n-Di?e-Hellman Exponent Problem (n-DHE) [25]
LetGbeagroupofprimeorderpandg?Gbethegenerator ofG. Given(g,g ,...,g ,g ,...,g )
1 n n+2 2n
i n+1
(? ) ? (? )
such that g =g where ??Z andi?[1,2n]\{n+1}, compute element g =g .
i n+1
p
Deﬁnition 2.7. Flexible n-Di?e-Hellman Exponent Problem (n-FlexDHE) [4]
LetGbeagroupofprimeorderpandg?Gbethegenerator ofG. Given(g,g ,...,g ,g ,...,g )
1 n n+2 2n
i
? ?
(? ) ? ?
such that g =g where ??Z and i?[1,2n]\{n+1}, compute a triple (g ,g ,g )
i
p n+1 2n
n+1
? ?
where ??Z and g =g .
n+1
p
Symmetric pairings-related security assumptions.
Deﬁnition 2.8. Bilinear Di?e-Hellman Problem (BDH)
BDH problem is deﬁned in Type-1 pairings. Let bilinear map e:G?G??G and g?G
T
x y z ?
be the generator ofG. Given a =g , b =g and c=g where where x,y,z?Z , compute
p
xyz
e(g,g) .
Asymmetric pairings-related security assumptions.
Deﬁnition 2.9. Symmetric External Di?e-Hellman Problem (SXDH) [23]
SXDH problem is deﬁned in Type-3 pairings. Let bilinear map e:G ?G ??G , SXDH
1 2 T
problem assumes DDH problem is hard both in G and G .
1 2
Deﬁnition 2.10. Triple Di?e-Hellman Problem (TDH) [13]
TDH problem is deﬁned in Type-3 pairings. LetG ,G , and G be cyclic groups of order
1 2 T
y
x x
p and deﬁne bilinear map e : G ?G ?? G . Given g ,g ,g ? G , g ,g ? G ,
1 2 T 1 1 2 2
1 1 2
1/(x+c )
i ?x ?y ?xy
?
and{c ,g } where x,y,c ,...,c ? Z , output a tuple (g ,g ,g ) for some
i i=1...q 1 q
p
1 2 1 1
??Z .
p8 CHAPTER 2. Pairing-based Cryptography
Figure 2.1: Suggested key size of di?erent style of cryptographic primitives [1]
Author ? ECC-style RSA-style
NIST[26] 80 160 1024
128 256 3072
256 512 15360
Lenstra[27] 80 160 1329
128 256 4440
256 512 26268
ECRYPT[28] 80 160 1248
128 256 4440
256 512 15424
2.3 Practical issues of pairing implementations
Bilinear pairings have been utilized to construct a variety of applications that traditional
public-key system cannot provide; however, the majority of proposed pairing-based cryp-
tographic schemes concentrate on theoretical investigation rather than considering the
practical issue of pairing implementations. In reality, implementations of bilinear pairings
are signiﬁcantly restricted since it is unfortunately evident that a few of elliptic curves
can be used for constructing bilinear pairings. Moreover, even one pairing-based scheme
can be successfully constructed, the computational cost may beextremely high and hence
cannot be practically deployed. Seeing this problem, in this section, it is necessary to
discuss the feasibility of implementing di?erent types of pairing constructions, as well as
the techniques that we can used to improve the e?ciency of pairing-based schemes.
Theimplementationofbilinearpairingscontainscomplexpointcomputationonelliptic
curves. Let e: G ?G ??G be a bilinear map whereG ,G andG are cyclic groups
1 2 T 1 2 T
of order p, and let e(P,Q) where P ? G and Q ? G be the expression of pairing
1 2
computations. In general, G is constructed as a subgroup of E(F ) where E is a elliptic
1 q
curve and q is the ﬁeld size of one ﬁeld F. Similarly, G is constructed as a subgroup of
2
E(F k), which is k-th extension of ﬁnite ﬁeld F and k is also called embedding degree.
q q
?
LastlyG is a subgroup of E(F ).
T k
q
Galbraith et al. [1] comprehensively discuss the implementation issue of bilinear pair-
ings. Here we review several points that are critical for designing pairing-based schemes.
Firstly it is pivotal to realize that the e?ciency of bilinear pairings are more like tradi-
tional public-keysystem, ratherthanellipticcurves. PleaserefertoTable2.1, whichisthe
suggested key size of ECC-style and RSA-style for achieving security degree ? by NIST
[26], Lenstra [27], and ECRYPT [28]. Suppose we want to construct a bilinear pairing
satisfying security degree ? = 256 of NIST, we can choose E(F ) of ECC-style 512 as
q
the cyclic group G , and set the size of G = E(F k) at lease greater than 15360 bits. It
1 2
q
is clear the bottleneck of this bilinear pairing function is on the computation of E(F ),
k
q2.4. OPTIMIZATION OF PAIRING-BASED CRYPTOGRAPHY 9
which is like RSA-style system, rather than e?cient elliptic curves. This fact illustrates
why the majority of proposed pairing-based schemes may show ine?ciency in practical
implementations.
Secondly, itisnotalways trueforpairing-basedschemestoﬁndsuitableellipticcurves.
Please continue theabove example, if wewantto chooseE(F k)ofgroupsizep, given q be
q
512 bits, theembeddingdegreek willbe15360/512 =30. However, currentlywestill have
no way to construct such elliptic curves with embedding degree 30. This fact signiﬁcantly
shorten the feasibility of implementing some pairing-based schemes.
According to the collection and analysis of known bilinear pairings in [1], up to now
onlyType-1pairingsandType-3pairingscanbepracticallyimplemented. Basically Type-
3 pairings can provide ﬂexible choice for implementing pairing-based schemes without
any limitation. Type-1 pairings, G ? G ?? G , however, are usually constructed on
1 1 T
elliptic curves over F , F d and F d with embedding degree 2 ,4 and 6. The signiﬁcant
p
2 3
feature of Type-1 pairings is that group elements are commutable, e.g. e(P,Q)=e(Q,P),
which simplify the design of pairing-based schemes. However, Type-1 pairings show two
shortcomings. Firstly to defend Pollard-rho attack on elliptic curve ﬁelds, the group size
of elliptic curves should be set to larger than 256 bits, which is equivalent to ? = 128.
Fortunately Type-1 pairings can ﬁnd suitable elliptic curves for satisfying this security
degree; however, in terms of higher security degree of ?=192 or ?=256, Type-1 pairings
show no e?cient implementations. Secondly, while doing one pairing calculation, Type-1
pairings take more group elements and more group operations than Type-3 pairings take.
Therefore, on the consideration of ﬂexibility and e?ciency of bilinear pairings, Type-3
pairings show more advantage than Type-1 pairings.
2.4 Optimization of pairing-based cryptography
DespiteﬂexibilityofType-3pairings,computationalcostofbilinearpairingisstillhigh. To
address this issue, cryptographers make great e?orts on optimizing pairing computation.
Scott [2] concludes two techniques that could be used for pairing optimizations.
The ﬁrst technique is called ﬁxed argument optimization, ﬁrstly introduced in [29]
and further discussed in [30], which discusses the advantage of ﬁxed argument in pairing
calculation. If both P and G are ﬁxed arguments, the pairing calculation e(P,Q) can
be precomputed and stored. And if Q? G = E(F ) is ﬁxed, then the possible value
k
2
q
x
of Q can be precomputed for further use. However, ﬁxed argument P ? G = E(F )
1 q
cannot bring any advantage for pairing optimization. Fixed argument optimization can
be deployed both in Type-1 pairings and in Type-3 pairings.
The second technique aims to accelerate the calculation of products of pairings.
n
Y
t = e(P ,Q )
i i
i=1
Productsof pairingsis common inpairing-based cryptographic schemes and theoptimiza-
tion technique is ﬁrstly introduced by Scott [29] and further enhanced by Granger and10 CHAPTER 2. Pairing-based Cryptography
Smart [31]. This optimization focus on sharing the same variable m and ﬁnal exponenti-
ation in Miller’s algorithm (Figure 2.2). However, pairing product computation may not
always appearinpairing-basedschemes; hencethedeploymentofthistechniqueislimited.
Figure 2.2: Miller’s algorithm [2]Chapter 3
Review of P-signature Schemes
P-signatures, which stand for signatures with e?cient protocols, are ﬁrstly introduced
by Belenkiy et al. [13] in 2008 and are regarded as important building blocks for many
applications in modern cryptography. Generally A P-signature scheme comprises:
1. A commitment scheme for users to hide their messages to be signed.
2. A signature scheme for signature signers to sign received commitments.
3. An interactive protocol for users to acquire signatures from signature signers.
4. A non-interactive proof for users to prove the validity of signatures to third parties
without revealing the underlying messages.
5. A non-interactive proof forusers to prove two di?erent commitments arecommitments
to the same message.
In this chapter, we will review three P-signature schemes, which are single-block P-
signature schemes [13], multi-block P-signature schemes [14], and block-wise P-signature
schemes [4] respectively. Moreover, we also review Groth-Sahai proof systems [3], which
are the essential tool for all P-signatures to construct non-interactive proofs.
3.1 Groth-Sahai non-interactive proof systems
Traditionallyinteractivezero-knowledgeproofsareconstructedonwell-knownNP-problems
such as circuit satisﬁability, which take enormous time to complete a proof of knowledge.
Although interactive zero-knowledge proof can be transferred to non-interactive proof by
applying Fiat-Shamir paradigm [17] and random oracle model [18], this methodology may
lead proofsto beinsecure[19,20] whilereplacingrandomoracle with areal hashfunction.
Recently Groth and Sahai [3] found an extraordinary idea to construct non-interactive
system based on group-dependent language and common reference string (CRS), which
provides a secure and e?cient way to construct non-interactive proof systems. Basically,
Groth-Sahai non-interactive proof systems possess witness indistinguishability and can be
1112 CHAPTER 3. Review of P-Signatures
further transferred to zero-knowledge proofs. In fact, the construction of P-signatures
heavily rely on Groth-Sahai commitment schemes and proof systems; therefore, to better
understandP-signaturesitisnecessarytoreviewthesetwopartsofGroth-Sahaiproofsys-
tems. The original Groth-Sahai non-interactive proof systems can be either implemented
on Type-1 Pairings or Type-3 Pairings; in this section, we will focus on the version of
Type-3 pairings.
Figure 3.1: Groth-Sahai proof system [3]
Essentially Groth-Sahai proofs utilize group-dependent language to construct proofs.
Please refer to Figure 3.1, Groth-Sahai proofs deﬁne two bilinear pairings functions f :
A ?A ??A and F :B ?B ??B , a function ? :B??B and a trapdoor one-way
1 2 T 1 2 T
function ?:B??A, so that computation is e?cient in ? but not trivial in ?. The deﬁned
map should satisfy the following two properties:
?x?A ,?y?A : F(? (x),? (y))=? (f(x,y)), (3.1)
1 2 1 2 T
?X?B ,?Y?B : f(? (X),? (Y)) =? (F(X,Y)),
1 2 1 2 T
To make a Groth-Sahai proof, common reference string (CRS) is required to be set
up. In general, CRS is a set of elements deﬁned inB and the variable setting is di?erent
i
1
in di?erent type of pairings. In general we denote CRS byU = (U ,U ), whichU =U ,
1 2 1
1
m m
1 1 2
...,U ?B andU =U , ...,U ?B . To commit to an element x?A , one selects
1 2 2 i
2
1 2
??
m
i
random vectors r = (r ,...,r )?F and computes
1 m
i q
m
i
X
j
comm (x) =? (x)+ [r ]U (3.2)
i i j
i
j=1
??
=? (x)+ r ·U
i i
Then suppose we want to construct a NIWI proof for the equation
a·y+x·b+x·?y =t (3.3)
where f(x,y) = x· y, we ﬁrstly make commitments for x and y with Groth-Sahai
commitment scheme.
c=? (x)+RU (3.4)
i 1
d=? (y)+SU
i 23.1. GROTH-SAHAI NON-INTERACTIVE PROOF SYSTEMS 13
m n
whereR,S are random vectors. Next one can pick a?A , b?A , and H? Mat
m ?m
1 2 2 1
an computes
T T T T
π =R ? (b)+R ?? (y)+R ?SU ?H U (3.5)
2 2 2 2
T T T T
? =S ? (a)+S ? ? (x)+H U
1 1 1
The veriﬁcation of this NIWI proof can be veriﬁed by checking whether the following
equation holds
? (a)•d+c•? (b)+c•?d=? (t)+U •π+?•U (3.6)
1 2 T 1 2
HereX•Y represents the computation of F(X,Y).
Dependingondi?erentsettingofgroupA andA ,therearefourpossibleinstantiations
1 2
1
for constructing Groth-Sahai proofs.
1. A = G , A = G , f(P,Q) =e(P,Q): This setting is named pairing-product equa-
1 1 2 2
tion.
2. A =G ,A =F , f(P,y)=[y]P: This setting is named multi-scalar multiplication
1 1 2 q
inG .
1
3. A =F ,A =G , f(x,Q)=[x]Q: Thissetting isnamed multi-scalar multiplication
1 q 2 2
inG .
2
4. A =F ,A =F , f(x,y)=x·y: This setting is named quadratic equation inF .
1 q 2 q q
3.1.1 Groth-Sahai commitment schemes
Groth-Sahai commitment schemes consist of three functions, which are GSComSetup(.),
GSCom(.) and GSOpen(.) respectively.
GSComSetup(p,G ,G ,g). Taken groupsG andG generated by generator g of prime
1 2 1 2
order p, GSComSetup(.) outputs common reference string params .
com
GSCom(params ,m,open). Taken common reference params , a message m?G
com com i
to be committed, chosen a random value open, GSCom(.) produces commitment
comm. To commit to an exponent e? Z of a base b? G , GSCom(.) can be
p i
extendedtoGSExpCom(params ,b,e,open)wherecomm=GSCom(params ,
com com
e
b , open).
GSOpen(params ,comm,m,open). Taken common reference params , the com-
com com
mitment comm to be veriﬁed, the message m? G , and the random value open,
i
GSOpen(.) accepts if comm is the commitment of m. Opening comm gener-
ated by GSExpCom(params ,b,exp,open) can also besimilarly doneby checking
com
exp
GSOpen(params ,comm,b ,open).
com
1
In DLIN assumption of Type-1 pairings, there are three possible instantiations for Groth-Sahai proofs
since case 2 and case 3 are the same.14 CHAPTER 3. Review of P-Signatures
Groth-Sahai commitment schemes can be constructed based on SXDH problem where
G 6=G or DLIN problem whereG =G and the achievement is turn out to be perfect
1 2 1 2
binding, computational hiding and extractable, one can get the detailed introduction in
[3].
3.1.2 Groth-Sahai pairing inner product equation and its proof
Groth-Sahai proofs [3] construct f-extractable non-interactive proof of knowledge (NIPK)
by providing inner product equation of bilinear maps. In Type-3 pairings, assume we
have bilinear maps (p,G ,G ,G ,e,g ,g ) where G ,G ,G are cyclic groups of prime
1 2 T 1 2 1 2 T
order p, g and g are generators of G and G , e :G ?G ??G is the bilinear map
1 2 1 2 1 2 T
function. Also we deﬁne params and params be the system parameters for G and
1 2 1
2
G to construct Groth-Sahai commitments. To construct NIPK proof Groth and Sahai
2
introduce inner product equation for commitments of{c} in G and{d} in
i i=1...m 1 j i=1...n
G .
2
NIPK{((c :x ),...,(c :x ),(d :y ),...,(d :y )):
1 1 m m 1 1 n n
n m m n
Y Y YY
r
ij
e(a ,y ) e(x ,b ) e(x ,y ) =t} (3.7)
j j i i i j
j=1 i=1 i=1j=1
where{a ,...,a }?G ,{b ,...,b }?G , t?G , and{r } ?Z .
1 n 1 1 m 2 T ij i=1...m,j=1...n p
Groth-Sahai witness-indistinguishable proofs
WiththehelpofGroth-Sahaipairinginnerproduct,aGroth-Sahaiwitness-indistinguishable
proof can be constructed as follows.
GSSetup(params ). Takensecurityparameterofbilinearmapsparams ,GSSetup(.)
BM BM
generates all necessary parameters params used in Groth-Sahai proofs, including
GS
params for constructing G , params for constructing G , and params for con-
1 1 2 1 π
structing proofs.
GSProve(params ,s,({x} ,{y} ,opens)). Takensystemparametersparams ,
GS i 1,...,m j 1,...,n GS
statements s={(c , ..., c , d , ..., d ), equations}, witnesses{x } ,{y } ,
1 m 1 n i 1,...,m j 1,...,n
and opening values opens, output a proof π.
GSVerify(params ,π). Taken a proof π, GSVerify(.) accepts if π is a valid proof.
GS
GSExtractSetup(params ). Taken security parameter of bilinear maps params ,
BM BM
GSExtractSetup(.) outputs a pair of auxiliary values (av ,av ) which is used for
1 2
extract the contents of commitments.
GSExtract(params ,av ,av ,π). GSExtract(.) extractsX=x , ...,x ?G andY =
GS 1 2 1 m 1
y , ..., y ?G suchthat(X, Y)satisﬁesinnerproductequations andcommitments.
1 n 2
2
In Type-1 pairings, G =G and params =params
1 2 1 23.1. GROTH-SAHAI NON-INTERACTIVE PROOF SYSTEMS 15
proofs of equality of committed exponents
To prove equality of commitment on exponents, Groth and Sahai provide the following
proving methods for exponents in di?erent groups. .
Committed exponents in di?erent groups. Let g ? G and g ? G , to construct
1 1 2 2
?
?
a proof NIPK{ ((c :G ),(d :G )): ?=?}, we can conduct Groth-Sahai equation
1 2
? ?
? ? ?1
proof NIPK{ ((c:g ),(d:g )): e(g , g )e(g , g )=1}.
2
1 2 1 1 2
Committed exponents in the same group. Let g ,u?G and g ?G , to construct
1 1 2 2
? ?
a proof NIPK{ ((c : g ),(c : u )): ?=?}, we can conduct Groth-Sahai equation
1 2
1
?
? ?
proof NIPK{ ((c :g ), (c :u ), (d:g )): ? = ?? ? = ?}.
1 2
1 2
Zero-knowledge proofs. Let g ?G and g ?G , to construct a zero-knowledge proof
1 1 2 2
?
?
NIZK{ ((c : g ),(c : g )): ?=?}, we can conduct Groth-Sahai equation proof
1 2
1 1
? ? ? ?1
?
NIZK{ ((c :g ),(c :g ), (d:g )): 1? e(g , g )e(g , g )=1}.
1 2 1 2
1 1 2 2 1
3.1.3 SXDH-based instantiation of Groth-Sahai proofs
After grasping the general idea of Groth-Sahai proof system, here we provide a speciﬁc
instantiation based on Type-3 pairings, which will be used in the reviewing P-signature
3
schemes except for block-wise P-signatures. In Type-3 pairings, Groth-Sahai proofs
are constructed based on SXDH assumption. Here we follow the notion of Groth-Sahai
proof provided by Ghadaﬁ et al. [32], which can provide more clear understanding of
SXDH-based instantiation.
2 2 4
CRS Setup. without loss of generality, let B =G ,B =G andB =G , we deﬁne
1 2 T
1 2 T

B ?B ??B
1 2 T
F =
(X ,Y ),(X ,Y ) ??(e(X ,Y ),e(X ,Y ),e(X ,Y ),e(X ,Y ))
1 1 2 2 1 1 1 2 2 1 2 2
?
In terms of CRS setting, for i=1,2, a ,t ?F , we prepare
i i
q
Q =[a ]P , U =[t ]P , V =[t ]Q
i i i i i i i i i
and set
1
U =(P ,Q )?B
i i i
i

1
[t ]U =(U ,V ) Binding case
i i i
2
i
g(x,y)U =
i 1
[t ]U ?(O,P ) =(U ,V ?P )) Hiding case
i i i i i
i
1 2 1 2
The CRS is{U ,U} whereU ={U ,U } andU ={U ,U }. We also deﬁneW =
1 2 1 2 i
1 1 2 2
2
U + (O,P ) = (W , W )?B .
i i,1 i,2 i
i
3
Block-wise P-signatures use DLIN-based instantiation of Groth-Sahai proofs due to the adoption of
Type-1 pairings construction. Here we will not discuss DLIN-based instantiation of Groth-Sahai proof.
Please refer to original paper [3] to see the detail setting DLIN-based instantiation.16 CHAPTER 3. Review of P-Signatures
?, ? and comm. Herewedeﬁnethemaps? : A ??B ,? : B ??A , andcommitment
i i i i i i i i i
scheme. There are two cases to be considered.
WhileA =F , the maps are deﬁned as
i q
 
F ??B B ??F
q i i q
? : ? :
i i
x ??[x]W X =([c ]P ,[c ]P ) ??c ?a c
i 1 i 2 i 2 i 1
Observing ? function, the underlying computation forms an ElGamal encryption.
i
Andcomputing? function requires one to hold the secrets c andc ; otherwise, one
i 1 2
need to solve discrete logarithms. To commit to x?F , the commitment scheme is
q
deﬁned as

F ?F ??B
q q i
comm :
i
1
(x,r) ??? (x)+[r]U
i
i
WhileA =G , the maps are deﬁned as
i i
 
G ??B B ??G
i i i i
? : ? :
i i
X ?? (O,X) X =(C ,C ) ??C ?[a ]C
1 2 2 i 1
Thesame,? functionalsoformsanElGamalencryption. Andcomputing? function
i i
requires one to hold the secrets a ; otherwise, one need to solve discrete logarithms.
1
To commit to x?G , the commitment scheme is deﬁned as
i

G ?F ?F ??B
i q q i
comm :
i
1 2
(X,r ,r ) ??? (X)+[r ]U +[r ]U
1 2 i 1 2
i i
? and ? . Here we deﬁne maps maps ? : A ?? B and ? : B ?? A . Depending
T T T T T T T T
on di?erent equation we want to prove, there are four cases to deﬁne ? and ? .
t T
For pairing product equation
 
B ??G
G ??B
T T T T
? : ? :
T T ?a ?a
1 1 ?a
2
Z ??(1,1,1,Z) (Z ,Z ,Z ,Z ) ??Z Z (Z Z )
1,1 1,2 2,1 2,2 2,2 2,1
1,2 1,1
For multi-scalar multiplication equation inG andG , ? is respectively deﬁned as
1 2 T

G ??B
1 T
? :
T
X ??(1,1,e(X,W ),e(X,W ))
2,1 2,2

G ??B
1 T
? :
T
X ??(1,e(X,W ),1,e(X,W ))
2,1 2,2
And ? is deﬁned as
T

B ??G
T i
? :
T
s s s s
1 2 3 4
(Z ,Z ,Z ,Z ) ??s ?a s ?a s +a a s P
4 1 2 2 3 1 2 1 i3.1. GROTH-SAHAI NON-INTERACTIVE PROOF SYSTEMS 17
where Z =e(P ,P ).
1 2
For quadratic equation inF , we deﬁne Z =e(P ,P ) and then
q 1 2

F ??B
q T
? :
T
z
z ??F(W ,W )
1 2

B ??F
T q
? :
T
s s s s
1 2 3 4
(Z ,Z ,Z ,Z ) ??s ?a s ?a s +a a s
4 1 2 2 3 1 2 1
Figure 3.2: Group elements used in SXDH-based Groth-Sahai proof [3]
Assumption: SXDH G G Z
1 2 p
Variable x?Z ,X?G 2 0 0
p 1
Variable y?Z ,Y?G 0 2 0
p 2
Pairing product equations 4 4 0
?? ??
- Linear equation: A·Y =t 2 0 0
T
?? ??
- Linear equation: X·B =t 0 2 0
T
Multi-scalar multiplication equation inG 2 4 0
1
??
??
- Linear equation: A· y =T 1 0 0
1
?? ??
- Linear equation: X· b =T 0 0 2
1
Multi-scalar multiplication equation inG 4 2 0
2
??
??
- Linear equation: a·Y =T 0 0 2
1
??
??
- Linear equation: x·B =T 0 1 0
2
Quadratic equation inZ 2 2 0
p
?? ??
- Linear equation: a· y =t 0 0 1
??
??
- Linear equation: x· b =t 0 0 1
Cost of Groth-Sahai proofs.
Depending on di?erent type of equations of di?erent pairing environment, Groth-Sahai
proofsrequiredi?erentgroupelementsinvolvedincomputation. Pleasereferto3.2and3.3
that shows required group elements in SXDH setting and DLIN setting. Overall Groth-
Sahai proofs cost less in SXDH setting than in DLIN setting. For the cost of making
commitments, SXDH setting only need two group elements, but it costs three in DLIN
setting. Moreover, in pairing product equation for example, SXDH setting costs 8 group
elements in G and G while DLIN setting costs 9 group elements in G. The di?erence
1 2
of used group elements between these two pairing settings signiﬁcantly shows that SXDH
setting take advantage in proofs computation.18 CHAPTER 3. Review of P-Signatures
Figure 3.3: Group elements used in DLIN-based Groth-Sahai proof [3]
Assumption: DLIN G Z
p
Variable x?Z ,Y?G 3 0
p
Pairing product equations 9 0
?? ??
- Linear equation: A·Y =t 3 0
T
Multi-scalar multiplication equation inG 9 0
??
??
- Linear equation: a·Y =T 0 3
??
??
- Linear equation: x·B =T 2 0
Quadratic equation inZ 6 0
p
??
??
- Linear equation: x· b =t 0 2
3.2 Single-block P-signature schemes
In 2008 Belenkiy et al. [13] introduced the ﬁrst P-signature scheme with e?cient non-
interactive proofandthe achievement can bedirectly deployed foranonymous credentials.
Despitesingleblockconstructionthatmightbeonlysuitableforsinglemessage, thispaper
deﬁnestheessential propertiesandsecuritymodelsofP-signatures, whichcanberegarded
as the preliminary of P-signatures.
3.2.1 F-unforgeable signatures of single-block P-signatures
Single-block P-signatures take F-unforgeable signatures as building blocks. F-unforgeable
signatures are ﬁrstly formalized by Belenkiy et al. [13] and the idea comes from the fact
that Groth-Sahai proofs cannot completely prevent attackers from making forgeries while
seeing (m, ?). Instead, if attackers are capable of compromising one way function F,
they can produce a forgery (F(m), ?) that can pass the veriﬁcation procedure. Basically
F-unforgeable signatures is inspiredby theBoneh-Boyen signature scheme[33] andcan be
illustrated as follows.
k
FSigSetup(1 ). Taken security parameter k, output parameters params = (p,G ,G ,
1 2
G ,e,g,h) for bilinear maps e :G ?G ??G whereG =hgi and G =hhi are
T 1 2 T 1 2
cyclic groups of prime order p. Moreover, we deﬁne t=e(g,h).
FKeyGen(params). The signer chooses secret-key sk = (?,?) where ?,? ? Z and
p
? ? ? ?
computes public-key pk = (v,w,v¯,w¯) where v = h , w = h , v¯ = g , w¯ = g . The
generated public key pk can be veriﬁed by checking e(g,v) = e(v¯,h) and e(g,w) =
e(w¯,h).
FSign(params,(?,?),m). The signer signs message m by randomly choosing r? Z ?
p
1/(?+m+?r)
{(??m)/?}andthencomputingsignature? =(C ,C ,C )whereC =g ,
1 2 2 1
r r
C =w , C =u .
2 33.2. SINGLE-BLOCK P-SIGNATURE SCHEMES 19
FVerify(params,(v,w,v¯,w¯),m,?). The signature ? = (C ,C .C ) is valid if the public
1 2 2
key is valid by checking by checking e(g,v) =e(v¯,h) and also the signature is valid
m
by checking e(g,w) =e(w¯,h) and e(C ,vh C )=t, e(u,C )=e(C ,w).
1 2 2 3
The above F-unforgeable signatures is proven secure based on HSDH problem and
TDH problem. The full proof can be found in [13].
3.2.2 Single-block P-signatures schemes
With the help of F-unforgeable signatures, the algorithms of single-block P-signatures are
described as follows.
k
SBPSigSetup(1 ). Taken security parameter k, this function generates params =
BM
(p,G ,G ,G ,e,g,h) for bilinear maps, params =(params ,params ,
1 2 T GS BM 1
params ,params ) for Groth-Sahai commitments and proofs. Moreover, this func-
2 π
tion randomly chooses u ? G and sets t = e(g,h), ﬁnally outputs params =
1
(params ,u).
GS
SBPKeyGen(params). This function operates FKEYGen(params ) and generates
BM
public key pair (sk,pk)=((?,?),(v,w,v¯,w¯)).
SBPSign(params,sk,m). Givensecret-keyskandmessagem,asignature? =(C ,C ,C )
1 2 3
1/(?+m+?r) r
isgeneratedbyoperatingFSign(params,sk,m);thatis,C =g ,C =w ,
1 2
r
and C =u .
3
SBPVerify(params,pk,m,?). Given public-key and a signature sigma, the signature is
valid if it passes FVerify(params,pk =(v,w,v¯,w¯),m,?).
SBPCom(params,m,open). Given a message m and a random value open, a commit-
m
ment comm is generated by operating GSCom(params ,h ,open).
2
SBPSigObtain(params,pk,comm,open)?? SBPSigIssue(params,sk,comm). Single
block P-signatures deﬁne a interactive protocol for one user to obtain a signature
from an issuer. The protocol is described as follows.
1. The user randomly picks ? ,rho ?Z and the issuer randomly picks z?Z .
1 2 p p
2. The user exchanges secret variables with the issuer in a secure two-party com-
putation protocol. After exchange, the user gets z and the issuer acquires
? ,rho .
1 2
3. The user operatesg GSCom(params,m,open) and generates a commitment
comm to a message m and send comm to the issuer.
4. The issuer verify the validity of comm, if valid, the issuer computes x = (?+
? ? ? ? 1/x ? z
m+?? r)? and generates a tuple (C ,C ,C ) where C =g , C =w , and
1 2
1 2 3 1 2
? z
C =u , and then sends back to the user.
320 CHAPTER 3. Review of P-Signatures
?? ??
2 1
5. Theusercomputessignature? =(C ,C ,C )whereC =C , C =C , and
1 2 3 1 2
1 2
??
1
C =C , and veriﬁes if ? is a valid signature.
3
3
SBPProve(params,pk,m,?). TheusercomputescommitmentsR =GSCom(params ,
1 1
C ,open ),R =GSCom(params ,C ,open ),R =GSCom(params ,C ,open ),
1 1 2 1 2 2 3 1 3 3
m m
R = GSCom(params , h , open ), R = GSCom(params , u , open ), then the
4 2 4 5 1 5
user constructs Groth-Sahai proof
? ?
π =NIPK{(R :C ),(R :C ),(R :C ),(R :h )m(R ,u ) :
1 1 2 2 3 3 4 5
?
e(C ,vh C )=t?e(u,C )=e(C ,w)?? =?} (3.8)
1 2 2 3
and outputs comm =R and π.
4
SBPProveVerify(params,pk,comm,π). One veriﬁer accepts the statement of relation
of m and ? if both public-key pk and Groth-Sahai π pass the veriﬁcation.
? ?
SBPEqCommProve(params,m,open,open). Taken two opens open and open, two
?
commitments commandcomm can berespectively computed byGSCom(params ,
2
m m ?
h ,open)andGSCom(params ,h ,open). Thenanon-interactivezero-knowledge
2
proof can be constructed as
? ? ?
π??NIZK{(comm:g ),(comm :g ):? =?} (3.9)
2 2
?
SBPEqCommVerify(params,comm,comm,π). A veriﬁer accepts π if the inner prod-
uct equation of π is valid.
Single-block p-signatures can only support one block of message and the security is
based on HSDH problem and THD problem that are inherently given by F-unforgeable
signatures, as well as SXDH problem that is ensuredby Groth-Sahai proof system. Please
refer the corresponding proofs in the original paper [13].
3.3 Multi-block P-signature schemes
Motivated by the applications of e-cash that contains a bunch of messages, Belenkiy et al.
[14]extendsingle-block P-signaturetosupportmultipleblocksofmessages. Theinvention
of multi-block P-signatures can not only signiﬁcantly diversify the possibleapplications of
anonymous credentials, but also help to strengthen other cryptographic primitives, such
as strongly simulatable veriﬁable random functions (sVRFs). In this section, we review
the signiﬁcant improvement of multi-block P-signatures.
3.3.1 F-unforgeable signatures of multi-block P-signatures
F-unforgeable signatures of multi-block P-signatures are extended from the F-unforgeable
signatures of single-block P-signatures. The major enhancement is that the exponent
calculation of C of signature ? supports multi-block message m = (m , ..., m ). The
1 1 n
detail algorithm of F-secure signatures is described as follows.3.3. MULTI-BLOCK P-SIGNATURE SCHEMES 21
k
MFSigSetup(1 ). Taken security parameter k, outputparametersparams=(p,G ,G ,
1 2
G ,e,g,h) for bilinear maps e :G ?G ??G whereG =hgi and G =hhi are
T 1 2 T 1 2
cyclic groups of prime order p. Moreover, we deﬁne t=e(g,h).
MFKeyGen(params). The signer chooses secret-key sk = (?,? = (? ,...,? )) where
1 n
? ? ?
i
?,??Z andcomputespublic-keypk =(v,w,v¯,w¯)wherev =h , v¯=g , w =h ,
p i
?
i
, w¯ =g . The generated public key pk can be veriﬁed by checking e(g,v) =e(v¯,h)
i
and e(g,w )=e(w¯ ,h) where i=1,...,n.
i i
MFSign(params,(?,?),m). Thesignersignsmessagem=(m ,m ,...,m )byrandomly
1 2 n
choosing r? Z ?{?(? + ? m +... + ? m )} and then computing a signature
p 1 1 n n
1/(?+r+? m +...+? m r) r r
1 1 n n
? =(C ,C ,C ) where C =g , C =h , C =u .
1 2 2 1 2 3
MFVerify(params,(v,w,v¯,w¯),m,?). The signature ? =(C ,C .C ) is valid if the pub-
1 2 2
lickeyisvalidbycheckingbycheckinge(g,v) =e(v¯,h)andalsothesignatureisvalid
Q
n m
i
by checking e(g,w) =e(w¯,h) and e(C ,vC w )=t, e(u,C )=e(C ,h).
1 2 2 3
i=1 i
Fromtheconstructionofabovealgorithm,itisevidentthemodiﬁcationofF-unforgeable
signatures of multi-block P-signatures is slight. In fact, the modiﬁed signature scheme is
also proven secure based on HSDH problem and TDH problem, which is exactly the same
as F-unforgeable signatures introduced in Section 3.2.1. The full proof can be found in
the original paper [14].
3.3.2 Multi-block P-signatures schemes
With the help of modiﬁed F-unforgeable signatures, multi-block P-signatures can be con-
structed as follows.
k
MBPSigSetup(1 ). Taken security parameter k, this function generates params =
BM
(p,G ,G ,G ,e,g,h)forbilinearmaps,params =(params ,params ,params ,
1 2 T GS BM 1 2
params ) for Groth-Sahai commitments and proofs. Moreover, this function ran-
π
domly chooses u? G and sets t=e(g, h), ﬁnally outputs params = (params ,
1 GS
u).
MBPKeyGen(params). This function operates MFKEYGen(params ) and gener-
BM
ates public key pair (sk,pk)= ((?, ?),(v,w,v¯,w¯)) where ?=(? , ..., ? ), w=(w , ...,
1 n 1
w ), and w¯=(w¯ , ..., w¯ ).
n 1 n
MBPSign(params,sk,m). Given secret-key sk and message m = (m , ...,m ), a sig-
1 n
nature ? = (C ,C ,C ) is generated by operating MFSign(params,sk,m); that is,
1 2 3
1/(?+r+? m +...+? m r) r r
1 1 n n
C =g , C =h , and C =u
1 2 3
MBPVerify(params,pk,m,?). Given public-key pk, message m=(m , ..., m ) and a
1 n
signature sigma, the signature is valid if it passes MFVerify(params, pk=( v, w, v¯,
w¯), m, ? ).22 CHAPTER 3. Review of P-Signatures
MBPCom(params,m,open). Givenamessagem=(m ,...,m )andrandomvaluesopen
1 n
=(open ,...,open ),acommitmentcomm=(comm ,...,comm )whereeachcomm
1 n 1 n i
m
i
consistingofapair(H ,U )generatedbyoperating(GSCom(params ,h ,open ),
i i 1 i,1
m
i
GSCom(params , u , open )).
1 i,2
MBPSigObtain(params,pk,comm,open)?? MBPSigIssue(params,sk,comm). In
this protocol, multi-block P-signatures deﬁne a interactive protocol for one user to
obtain a signature from an issuer. The protocol is the same with Single block P-
signatures and described as follows.
1. The user randomly picks ? ,? ?Z and the issuer randomly picks z?Z .
1 2 p p
2. The user exchanges secret variables with the issuer in a secure two-party com-
putation protocol. After exchange, the user gets z and the issuer acquires
? ,? .
1 2
3. The user operatesg GSCom(params,m,open) and generates a commitment
comm to a message m and send comm to the issuer.
4. The issuer verify the validity of comm, if valid, the issuer computes x = (?+
? ? ? ? 1/x ? z
m+?? r)? and generates a tuple (C ,C ,C ) where C =g , C =w , and
1 2
1 2 3 1 2
? z
C =u , and then sends back to the user.
3
?? ??
2 1
5. Theusercomputessignature? =(C ,C ,C )whereC =C , C =C , and
1 2 3 1 2
1 2
??
1
C =C , and veriﬁes if ? is a valid signature.
3
3
MBPProve(params,pk,m,?). TheusercomputescommitmentsR =GSCom(params ,
1 1
C ,open ),R =GSCom(params ,C ,open ),R =GSCom(params ,C ,open ),
1 1 2 1 2 2 3 1 3 3
comm=(comm , ..., comm ), by operating MBPCom(params,m,open ) then
1 n comm
the user constructs Groth-Sahai proof
m m m m
1 1 n n
π = NIPK[h ?H ,u ?U ,...,h ?H ,u ?U ]{ (3.10)
1 1 n n
m m m m m m
1 1 1 n n n
(h ,u ,w ,...,h ,u ,w ,C ,C ,C ):
1 2 3
1 1
n
Y
m ?1
i
e(C ,vC w )=t?e(u,C )e(C ,h )=1?
1 2 2 3
i
i=1
m ?1 m n
i i
{e(w¯ ,h )e(g ,w )=1} }
i
i=1
i
MBPProveVerify(params,pk,comm,π). Oneveriﬁer accepts the statement of relation
of m and ? if both public-key pk and Groth-Sahai π pass the veriﬁcation.
? ?
MBPEqCommProve(params,m,open,open). Taken two opens open and open, two
?
commitments commandcomm can berespectively computed byGSCom(params ,
2
m m ?
h ,open)andGSCom(params ,h ,open). Thenanon-interactivezero-knowledge
2
proof can be constructed as
?
? ?
π??NIZK{(comm:g ),(comm :g ):? =?} (3.11)
2 23.4. BLOCK-WISE P-SIGNATURE SCHEMES 23
?
MBPEqCommVerify(params,comm,comm,π). Averiﬁeracceptsπ iftheinnerprod-
uct equation of π is valid.
From the construction of multi-block signatures introduced above, even though the
underlyingsignatureisslightlymodiﬁed,thecorrespondingproofalgorithmsaresigniﬁcant
di?erent. InordertoprovethevalidityofP-signatures,usersshouldgeneratecommitments
for each block of messages of P-signatures. Such construction will inevitably lead to large
size of proof while the amount of blocks of messages is large. Therefore, we can conclude
the e?ciency of proof of multi-block P-signatures will decline as the size of message is
increasing. And in terms of security, similar to single-block P-signatures, multi-block P-
signatures is secure provided the hardness of HSDH problem, TDH problem and SXDH
problem.
3.4 Block-wise P-signature schemes
Motivated by the emerging investigation on attribute-based cryptography, predicated-based
cryptography, Izabach`ene et al. [4] proposed block-wise P-signatures. Essentially the
message m=(m ,...,m ) in block-wise P-signatures represents user attributes, which is
1 n
signiﬁcantly di?erent from the deﬁnition of message in traditional P-signatures. More-
over, the commitments to the blocks of messages are required to be veriﬁable for some
predicates that represent the logical relation of di?erent combinations of message blocks.
Therefore, block-wise P-signatures can provide a variety of functionalities that traditional
P-signatures cannot provide.
The proposed construction of block-wise P-signatures is based on symmetric pairings;
hence, inthissectionwewillusethenotionofType-1pairings. LetG,G becyclicgroups
T
of prime order p and deﬁne e: G?G be the bilinear map.
3.4.1 Vector commitments of block-wise P-signatures
Di?erent from the traditional P-signatures, block-wise P-signatures design a new commit-
ment scheme. Given a commitment key (g,g ,...,g ,g ,...,g ), vector commitments
1 n n+2 2n
consist of two functions.
VecCom(m,r). Given message m = (m ,...,m ), choose r? Z and compute commit-
1 n p
ment V
n
Y
m
r j
V =g · g (3.12)
n+1?j
j=1
Moreover, to commit to a speciﬁc block of message, said m , we can compute a
i
witness
n
Y
m
r j
W =g · g (3.13)
i
i
n+1?j+i
j=1,j6=i24 CHAPTER 3. Review of P-Signatures
Q
m
n j
r
VecOpen(m,r,V). acommitmentV isvalid ifV =g · g . Moreover, toverify
j=1 n+1?j
a witness W , we can check if
i
m
i
e(g ,V)=e(g,W )e(g ,g ) (3.14)
i i 1 n
3.4.2 Block-wise P-signatures schemes
With the help of vector commitments, block-wise P-signatures, consisting F-unforgeable
signatures and all proof algorithms, are described as follows.
k
BWPSigSetup(1 ). Taken security parameter k, this function generates params = (n,
G,G ,g,e,f)whereGisacyclicgroupofprimeorderpandgeneratedbygenerator
T
g, e: G?G??G is a bilinear map and f=(f ,f ,f ) is common reference string
T 1 2 3
(CRS) for Groth-Sahai proof.
?
BWPKeyGen(params). Choosing ?, ?, ?, ? ? Z , u,U ? G, computing Ω = g ,
p 0
i
? ? (? )
? = g , U = g , and g = g for i? [1,...,n,n+2,...2n]. The secret-key sk =
1 i
(?, ?, ?) and public-key pk = (u, Ω, ?, U , U ,{g} ).
0 1 i
i?[1,2n]/{n+1}
BWPSign(params,sk,m). Taken message m = (m ,...,m ), the signer ﬁrstly chooses
1 n
Q
m
n j m
r m n r
1
r? Z and computes V = g · g =g ···g ·g . Secondly the signer
p
j=1 n+1?j n 1
chooses c?Z and computes ? = (? , ? , ? , ? , ? , ? , r) where
p 1 2 3 4 5 6
?/?+c
? =g , (3.15)
1
c
? =g ,
2
c
? =u ,
3
? c
? =(U V ) ,
4 0
c
? =V ,
5
? =V
6
BWPVerify(params,pk,m,?). Receiving message m = (m ,...,m ) and ? = (? , ? ,
1 n 1 2
Q
m
n j
r
? , ? , ? , ? , r), the veriﬁer accepts the signature if ? =g · g and
3 4 5 6 6
j=1 n+1?j
e(A,g) =e(? ,Ω,? ), (3.16)
1 2
e(u,? )=e(? ,g),
2 3
e(g,? )=e(U ,? )e(U ,? ),
4 0 2 1 5
e(g,? )=e(? ,? ),
5 6 2
BWPWitGen(params,R,i,m,X,?). TakenrelationR,indexi,m=(m ,...,m ),X =
1 n
(x ,...,x ) and ? = (? , ? ,? , ? , ? , ? , r),
1 n 1 2 3 4 5 6
EQ
1. IfR=R and m =x where i?[1,n], compute the witness
i i
n
Y
m
r j
W =g · g
i
n+1?j+i
j=1,j6=i3.4. BLOCK-WISE P-SIGNATURE SCHEMES 25
EQ
2. IfR=R and m 6=x , wherei?[1,n], compute the witness W = (W , W ,
i i 0 1
W , W , W ) where
2 3 4
1/(m ?x )
i i
W =g , (3.17)
0
(m ?x )
i i
W =g ,
1
1
(m ?x )
i i
W =g ,
2
(m ?x )
i i
W =g
3
2n
n
Y
m
r j
W =g · g
4
i
n+1?j+i
j=1,j6=i
IP
3. IfR=R , i=0, and , m·X =0, compute the witness
n
Y
x
i
W = W for each (3.18)
i
i=1
n
Y
m
j
r
W =g · g
i
i n+1?j+i
j=1,j6=i
IP
4. IfR =R , i = 0, and , m·X6= 0, compute the witness W = (W , W , W ,
0 1 2
W , W ) where
3 4
1/(m ?x )
i i
W =g , (3.19)
0
(m ?x )
i i
W =g ,
1
1
(m ?x )
i i
W =g ,
2
(m ?x )
i i
W =g
3
2n
n
Y
x
i
W = W for each
4
4,i
i=1
n
Y
m
r j
W =g · g
4,i
i
n+1?j+i
j=1,j6=i
BWPWitVerify(params,pk,i,X,W,?). Taken public-key pk, index i, X =(x ,...,x ),
1 n
witness W and a valid signature ? = (? , ? , ? , ? , ? , ? , r),
1 2 3 4 5 6
EQ
1. IfR=R and i?[1,n], output 1 if
x
i
e(g ,? )=e(g ,g ) ·e(g,W) (3.20)
i 6 1 n26 CHAPTER 3. Review of P-Signatures
EQ
2. IfR=R and i?[1,n], parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
?x
i
e(g ,?·g )=e(W ,g )·e(g,W ) (3.21)
i 1 n 4
n+1?i
e(W ,W )=e(g,g ),
0 1 1
e(W ,g) =e(g ,W ),
1 1 2
e(W ,g )=e(g ,W ),
1 2n 1 3
IP
3. IfR=R and i=0, output 1 if
n
Y
x
i
e(g,W) =e( g ,? ) (3.22)
6
i
i=1
IP
4. IfR =R and i = 0, parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
n
Y
x
i
e( g ,? )=e(W ,g )e(g,W ) (3.23)
6 1 n 4
i
i=1
e(W ,W )=e(g,g ),
0 1 1
e(W ,g) =e(g ,W ),
1 1 2
e(W ,g )=e(g ,W ),
1 2n 1 3
BWPSigObtain(pk,M ,open )?? MBPSigIssue(sk,V ,M ). this in-
part1 part1 part1 part2
teractive protocol provides users to acquire signatures from some organizations.
r
part1
1. the user chooses r ? Z and computes a commitment V = g ·
part1 p part1
Q
m
n j
1
g for message M =(m , ..., m ). The the user sets open =
part1 1 n part1
1
j=1 n+1?j
?
M =(m , ..., m , r ) and computes a witness-indistinguishable proof for
part1 1 n
1
Q
m
n j
r 1
part1
knowledge of M such that V =g · g .
part1 part1
j=1 n+1?j
part2
2. the signature issuer chooses r ,c?Z and computes
p
n
Y
m
j
V =V · g (3.24)
part1
n+1?j
j=n+1
?/(?+c)
? =g ,
1
c
? =g ,
2
c
? =u ,
3
r ? c
part2
? =(U (V·g ) ) ,
4 0
r c r
part2 part2
? =(V·g ) ,? =V·g
5 6
and return ?¯ = (? , ? , ? , ? , ? , ? , r ).
1 2 3 4 5 6 part23.4. BLOCK-WISE P-SIGNATURE SCHEMES 27
3. the user outputs ? = (? , ? , ? , ? , ? , ? , r) where r =r +r .
1 2 3 4 5 6 part1 part2
BWPProve1(params,pk,i,S ={i},m,X,?). Taken m =(m ,...,m ), X =(x ,...,x )
1 n 1 n
and ? = (? ,? ,? , ? ,? ,? ,r). Firstly this proof needs to compute{ C =
1 2 3 4 5 6 X ,j
t
x x
t x t
t
GSCom(X ,open )} where{(X ,X ,X )=(g ,g ,g )} . Sec-
t,j x t?S,j?{1,2,3} t,1 t,2 t,2 t?S
t,j 1 2n
ondly this proof computes commitments for {C = GSCom(? ,open )} .
? j ? j=1...6
j j
Thirdly this proof chooses ? ?G and ??Z , computes C = GSCom(? , open )
7 p ? 7 ?
7 7
and C = GSCom(? , open ), and then constructs a proof π proving the fol-
? ? ? theta
? ?
lowing equations.
e(? ,g)=e(? ,Ω·? )? (3.25)
7 1 2
e(u,? )=e(? ,g)?
2 3
e(g,? )=e(U ,? )e(U ,? )?
4 0 2 1 5
e(g,? )=e(? ,? )?
5 6 2
? =1?
?
e(?/? ,g )=1
7
There are two cases for this proof
EQ
- IfR =R , this proof computes commitment C = GSCom(W, open )
W W
EQ
whereW=BWWitGen(pk,R ,i,m,X,?)andthencomputesproofsπ ,{π }
x X t?S,j=1,2
i t,j
such that
e(g ,? )=e(X ,g )e(g,W)? (3.26)
i 6 i,1 n
e(X ,g )=e(X ,g)?
i,2 1 i,1
e(X ,g )=e(X ,g)
i,2 2n i,3
Theproofisπ =({C } ,{C } ,C ,C ,π ,π ,{π } ,).
x t?S,j=1,2,3 ? j=1,...,7 W ? ? x x t?S,j=1,2
t,j j i t,j
EQ
- IfR =R , this proof computes commitments{C } to (W , W , W ,
W j=0,...,4 0 1 2
j
W , W ) and generates proofs π ,π satisfying
3 4 x W
i
?1
e(g ,? )·e(X ,g ) =e(W ,g )·e(g,W )? (3.27)
i 6 i,1 n 1 n 4
e(W ,W )=e(g,g )?
0 1 1
e(W ,g) =e(g ,W )?
1 1 2
e(W ,g )=e(g ,W )
1 2n 1 3
andalsogeneratesproof{π } . Theﬁnalproofisπ=({C } ,
X t?S,j=1,2 x t?S,j=1,2,3
t,j t,j
{C } ,{C } , C ,π , π ,{π } ).
? j=1,...,7 W j=0,...,4 ? ? x x t?S,j=1,2
j j i t,j
BWPProve2(params,pk,R,i,m,,X,?). SimilartoBWPProve1, ﬁrstlythisproofcom-
putes commitments{C } , C , as well as proofs π and π . Then there are
? j=1,...,7 ? ? x
j i
four cases in this proof.28 CHAPTER 3. Review of P-Signatures
IP
- IfR =R , compute a commitment C = GSCom(W,open ) where W =
W W
IP
BWPWitGen(pk,R , 0, m, X, ?) and compute a proof π such that
X
n
Y
x
j
e( g ,? )=e(g,W)
6
j
j=1
Finally, the proof π = ({C } , C , C ,π , π ).
? j=1,...,7 W ? ? X
j
IP
- IfR = R , compute C = GSCom(g, open ), {C } where W =
g g W j=0,...,4 j
j
IP
BWPWitGen( pk,R , 0, m, X, ?), and compute a proof π such that
X
e(W ,W )=e(g,g )? (3.28)
0 1 1
e(W ,g) =e(g ,W )?
1 1 2
e(W ,g )=e(g ,W )?
1 2n 1 3
?
e(g/g,g )=1?
n
Y
x
j
e( g ,? )=e(g,W )·e(W ,g )
6 4 1 n
j
j=1
Finally, the proof π = ({C } ,{C } , C ,π , π ).
? j=1,...,7 W j=0,...,4 ? ? X
j j
EQ
- IfR =R compute a commitment C = GSCom(W,open ) where W =
W W
EQ
BWPWitGen(pk,R , i, m, X, ?), C = GSCom(X , open ) where X =
X i X i
i i
x
i
g , and compute proofs π and π such that
W X
1
x ?
i
e(g ,? )=e(X ,g )e(g,W)?e(X /g ,g )
i 6 i n i
1
Finally, the proof π = ({C } , C , C , C ,π , π ,π ).
? j=1,...,7 W X ? ? W X
j i
EQ EQ
- IfR =R , compute{ C } where W = BWPWitGen(pk,R ,
W j=0,...,4 j
j
x
i
0, m,X, ?), C = GSCom(X , open ) where X = g , and compute proofs
X i X i
i i 1
π ,{π } π , π such that
X W j=1,...,3 X g
i,W j i
?1
e(g ,? )e(X ,g ) =e(W ,g )e(g,W)? (3.29)
i 6 i n 1 n
e(W ,W )=e(g,g )?
0 1 1
e(W ,g) =e(g ,W )?
1 1 2
e(W ,g )=e(g ,W )?
1 2n 1 3
x ? ?
i
e(X /g ,g )=e(g/g,g )=1
i
1
Finally,theproofπ=({C } ,{C } ,C ,C ,π ,π ,{π } ,
? j=1,...,7 W j=0,...,4 X ? ? X W j=1,...,3
j j i j
i,W
π ).
?
? ?
BWPEqCommProve(params,m,open,open). Taken two opens open and open, two
?
commitments comm and comm can be respectively computed by C=GSCom(X,3.4. BLOCK-WISE P-SIGNATURE SCHEMES 29
? ? ?
open)andC =GSCom(X , open). Thenanon-interactive zero-knowledge proofcan
be constructed with f = (f , 1, g), f = (1, f , g), f = (f , f , f ) and prove
1 1 2 2 3 31 32 33
the tuple (? , ? , ? ) such that
1 2 3
? ? ? ? ? ?
1 3 2 3 3
C·C =(f f f f ,f )
1 31 2 32 33
E?ciencyisanattractivepointofblock-wiseP-signatures. Observingthenon-interactive
proof algorithm of block-wise P-signatures, it is remarkable that the size of proof will not
grow as the amount of message blocks increases. Therefore we can conclude that con-
struction block-wise p-signatures is more e?cient than the construction of multi-block
P-signatures.
Provable security of block-wise P-signatures
Block-wise P-signatures consider three kinds of forgeries in security proof. For the later
requirements of considering security of our revision on block-wise P-signatures, it is nec-
essary to review the attack model of it.
? ? ? ? ? ?
- Type-I F-forgeries show that an adversary outputs a forgery ? = (? , ? , ? , ? , ? ,
1 2 3 4 5
? ? ? ? ?
? , r ), such that the triple (? , ? , ? ) is not queried before.
6 i 1 2 3
? ? ? ? ? ?
- Type-II F-forgeries show that an adversary outputs a forgery ? = (? , ? , ? , ? , ? ,
1 2 3 4 5
? ? ? ? ? ?
? , r ), such that the tuple (? , ? , ? ) can be taken from j th queried. However,
6 1 2 3
i
?
? is di?erent from ? .
j,6
6
? ? ? ? ?
- Type-III F-forgeries show that an adversary outputs a forgery ? = (? , ? , ? , ? ,
1 2 3 4
? ? ? ? ? ? ? ?
? , ? , r ), such that the tuple (? , ? , ? , ? ) can be taken from j th queried
5 6 i 1 2 3 6
and the tuple can pass the signature veriﬁcation. However, the adversary is capable
of generating a valid signature witness proof that passes the witness veriﬁcation
procedure. This attack can be further discussed into four cases.
EQ
• Type-III-Aattacks describetheadversarygenerates apredicateoftheform(R ,
? ? ? ?
i, F(x )) for some i?1,...,n, and some random vector X = (x , ..., x ) such
t 1 n
? ?
that x is not queried before and the forged witness W satisﬁes Witness-
i
EQ ? ?
Verify(pk, R , i, X , W , ?) = 1.
EQ
• Type-III-Battacks describetheadversarygenerates apredicateoftheform(R ,
? ? ? ?
i, F(x )) for some i?1,...,n, and some random vector X = (x , ..., x ) such
t n
1
? ?
that x is not queried before and the forged witness W satisﬁes Witness-
i
EQ ? ?
Verify(pk, R , i, X , W , ?) = 1.
IP
• Type-III-Cattacks describetheadversary generates a predicate of the form (R ,
? ? n ?
0, X ) for X ? Z , and the forged witness W satisﬁes Witness-Verify(pk,
p
IP ? ?
R , i, X , W , ?) = 1.30 CHAPTER 3. Review of P-Signatures
IP
• Type-III-Dattacks describetheadversary generates apredicate of theform (R ,
? ? n ?
0, X ) for X ? Z , and the forged witness W satisﬁes Witness-Verify(pk,
p
IP ? ?
R , i, X , W , ?) = 1.
Responding to the attack model described above, block-wise P-signatures are proved
secure on the hardness of HSDH problem, FlexDH problem and n-FlexDHE. To be more
speciﬁc, Type-Iforgeriesareprovedsecureonthesecurityassumptionofq-HSDHproblem
whileType-IIforgeriesareprovedsecureontheassumptionofFlexDHproblem. Moreover,
all four di?erent cases of Type-III forgeries are proved secure on the security assumption
of n-FlexDHE problem. Please see the full proofs in the original paper [4].Chapter 4
Asymmetric Pairing Based
Block-wise P-signatures
The original block-wise P-signatures which is based on symmetric pairings are practically
inﬂexible and ine?cient in implementation. For the choice of symmetric pairings in dif-
ferent security degree, up to now there are only two known curves which can be used to
implement symmetric pairings satisfying security requirements of AES-80 and AES-128;
therefore, block-wiseP-signaturesbasedonsymmetricpairingsarehighlyrestricted toap-
pliedindi?erentsecuritycontext. Moreover, symmetricpairingstakemoretimeinpairing
computationthantheirasymmetriccounterparts; therefore, block-wiseP-signaturesbased
on symmetric pairings are practically ine?cient. Motivated by the above two critical con-
siderations on e?ciency issue, it is necessary to revise original block-wise P-signatures to
asymmetric pairings. In this chapter, we ﬁrstly propose a block-wise P-signatures based
on asymmetric pairings which are provably secure and computationally e?cient.
4.1 Block-wise P-signatures based on asymmetric pairings
Ournewblock-wiseP-signaturesaremodiﬁedbasedontheoriginalblock-wiseP-signatures.
To achieve this goal, there are two critical points we need to carefully deal with in our
design. Firstly, the working environment is on asymmetric pairings, which do not provide
elements commutable property between groups G and G . Therefore, it is necessary to
1 2
identify each equation containing appearance of swapping group elements in the origi-
nal block-wise P-signature scheme and try to design around for ﬁtting the property of
asymmetric pairings. The second critical point is that the revised block-wise P-signature
scheme should be also provably secure against forgery attacks; otherwise, the revision
cannot be used in practical applications. With these two design principles, we propose a
new block-wise P-signatures based on Type-3 pairings and the algorithms are illustrated
as follows.
3132 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
Modiﬁcation summary.
Pairing computation in original block-wise P-signatures signiﬁcantly heavily rely on the
group elements commutation in veriﬁcation procedure and this situation can be found in
themajorityofpairingequationsofblock-wiseP-signatures;fortunately,allofthemcanbe
designed around. To solve this problem, we mainly adopt two techniques. Firstly, instead
of{g} ? G in the public key setting, we extend it into two set of elements:
i i?[1,2n]/{n+1}
{g} ? G and{h} ? G . This public key extension setting
i 1 i 2
i?[1,2n]/{n+1} i?[1,2n]/{n+1}
can possess the advantage of preventing the original design from dramatical modiﬁcation
and untwist most cases of group element commutation. Moreover, this technique will
not increase extra veriﬁcation equation, which means the e?ciency can be maintained.
c ?
Secondly, instead of ? = g ? G where c? Z , we extend it into two parts, which are
2
p
c c
? = g ? G and ? = h ? G . This modiﬁcation helps to solve the problem of
21 1 22 2
single element being used both in G and G ; However, this extension will result in one
1 2
extra unveriﬁed group element in signature ? 2. Therefore, we have to increase another
2
?1
verifying equation e(? , ? )= 1 in the signature veriﬁcation to ensure the security of
21 G
22 T
signature. Using the above two techniques we successfully port block-wise P-signatures
into asymmetric pairings.
Our proposed block-wise P-signatures.
k
BWPSigSetup(1 ). Taken security parameter k, this function generates params = (n,
G , G , G , g , h, e, f) where G and G are cyclic groups of prime order p
1 2 T 1 1 2
and generated by generators g and g , e: G ?G ?? G is a bilinear map and
1 2 1 2 T
U=(U ,U ) is common reference string (CRS) for SXDH-based Groth-Sahai proof.
1 2
BWPKeyGen(params). Choosing ?, ?, ?, ? ? Z , u ? G , U ? G , computing
p 2 0 1
i i
? ? ? (? ) (? )
Ω = g , ? = g , U = h , g = g for i? [1,...,n,n+2,...2n] and h = h for
1 i i
i? [1,...,n,n+2,...2n]. The secret-key sk = (?, ?, ?) and public-key pk = (u, Ω,
?, U , U ,{g} ,{h} ).
0 1 i i
i?[1,2n]/{n+1} i?[1,2n]/{n+1}
BWPSign(params,sk,m). Taken message m = (m ,...,m ), the signer ﬁrstly chooses
1 n
Q
m
n j
r m m r
1 n
r? Z and computes V = g · g =g ···g ·g . Secondly the signer
p
n 1
j=1 n+1?j
chooses c?Z and computes ? = (? , ? , ? , ? , ? , ? , ? , r) where
p 1 21 22 3 4 5 6
?/?+c
? =h , (4.1)
1
c
? =g ,
21
c
? =h ,
22
c
? =u ,
3
? c
? =(U ?V ) ,
4 0
c
? =V ,
5
? =V
64.1. BLOCK-WISE P-SIGNATURES BASED ON ASYMMETRIC PAIRINGS 33
BWPVerify(params,pk,m,?). Receiving message m = (m ,...,m ) and ? = (? , ? ,
1 n 1 21
Q
m
n j
r
? , ? , ? , ? , ? , r), the veriﬁer accepts the signature if ? =g · g and
21 3 4 5 6 6
j=1 n+1?j
e(?,h) =e(Ω?? ,? ), (4.2)
21 1
e(? ,u)=e(g,? ),
21 3
e(? ,h) =e(U ,? )e(? ,U ),
4 0 22 5 1
e(? ,h) =e(? ,? ),
5 6 22
?1
e(? ,? )=1 ,
21 G
22 T
BWPWitGen(params,R,i,m,X,?). TakenrelationR,indexi,m=(m ,...,m ),X =
1 n
(x ,...,x ) and ? = (? , ? ,? ,? ,? ,? ,r),
1 n 1 2 3 4 5 6
EQ
1. IfR=R and m =x where i?[1,n], compute the witness
i i
n
Y
m
j
r
W =g · g . (4.3)
i n+1?j+i
j=1,j6=i
EQ
2. IfR=R and m 6=x , wherei?[1,n], compute the witness W = (W , W ,
i i 0 1
W ,W ,W ) where
2 3 4
1/(m ?x )
i i
W =h , (4.4)
0
(m ?x )
i i
W =g ,
1
1
(m ?x )
i i
W =g ,
2
(m ?x )
i i
W =g
3
2n
n
Y
m
j
r
W =g · g
4
i
n+1?j+i
j=1,j6=i
IP
3. IfR=R , i=0, and , m·X =0, compute the witness
n
Y
x
i
W = W for each (4.5)
i
i=1
n
Y
m
j
r
W =g · g
i
i n+1?j+i
j=1,j6=i
IP
4. IfR =R , i = 0, and , m· X 6= 0, compute the witness W = (W , W ,
0 134 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
W ,W ,W ) where
2 3 4
1/(m ?x )
i i
W =g , (4.6)
0
(m ?x )
i i
W =g ,
1
1
(m ?x )
i i
W =g ,
2
(m ?x )
i i
W =g
3
2n
n
Y
x
i
W = W for each
4
4,i
i=1
n
Y
m
j
r
W =g · g
4,i
i n+1?j+i
j=1,j6=i
BWPWitVerify(params,pk,i,X,W,?). Taken public-key pk, index i, X =(x ,...,x ),
1 n
witness W and a valid signature ? = (? , ? , ? , ? , ? , ? , ? ,r),
1 21 22 3 4 5 6
EQ
1. IfR=R and i?[1,n], output 1 if
x
i
e(? ,h )=e(g ,h ) ·e(W,h) (4.7)
6 i 1 n
EQ
2. IfR=R and i?[1,n], parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
?x
i
e(? ·g ,h )=e(W ,h )·e(W ,h) (4.8)
6 i 1 n 4
n+1?i
e(W ,W )=e(g ,h),
1 0 1
e(W ,h)=e(W ,h ),
1 2 1
e(W ,h )=e(W ,h ),
1 2n 3 1
IP
3. IfR=R and i=0, output 1 if
n
Y
x
i
e(W,h) =e(? , h ) (4.9)
6
i
i=1
IP
4. IfR =R and i = 0, parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
n
Y
x
i
e(? , h )=e(W ,h )·e(W ,h) (4.10)
6 1 n 4
i
i=1
e(W ,W )=e(g ,h),
1 0 1
e(W ,h) =e(W ,h ),
1 2 1
e(W ,h )=e(W ,h ),
1 2n 3 14.1. BLOCK-WISE P-SIGNATURES BASED ON ASYMMETRIC PAIRINGS 35
BWPSigObtain(pk,M ,open )?? MBPSigIssue(sk,V ,M ). this in-
part1 part1 part1 part2
teractive protocol provides users to acquire signatures from some organizations.
r
part1
1. the user chooses r ? Z and computes a commitment V = g ·
part1 p part1
Q
m
n j
1
g for message M =(m , ..., m ). The the user sets open =
part1 1 n part1
j=1 n+1?j 1
?
M =(m , ..., m , r ) and computes a witness-indistinguishable proof for
part1 1 n
1
Q
m
n j
r 1
part1
knowledge of M such that V =g · g .
part1 part1
j=1 n+1?j
part2
2. the signature issuer chooses r ,c?Z and computes
p
n
Y
m
j
V =V · g (4.11)
part1
n+1?j
j=n+1
?/(?+c)
? =h ,
1
c
? =g ,
21
c
? =h ,
22
c
? =u ,
3
r ? c
part2
? =(U (V·g ) ) ,
4 0
r c
part2
? =(V·g ) ,
5
r
part2
? =V·g
6
and return ?¯ =(? ,? ,? ,? ,? ,? ,? ,r ).
1 21 22 3 4 5 6 part2
3. the user outputs ? =(? ,? ,? ,? ,? ,? ,? ,r) where r =r +r .
1 21 22 3 4 5 6 part1 part2
BWPProve1(params,pk,i,S ={i},m,X,?). Taken m =(m ,...,m ), X =(x ,...,x )
1 n 1 n
and ? = (? , ? , ? , ? , ? , ? , ? , r). Firstly this proof needs to compute{ C
1 21 22 3 4 5 6 X ,j
t
x x
t x t
t
= GSCom(X ,open )} where{(X ,X ,X ) = (g ,g ,g )} .
t,j x t,1 t,2 t,2 t?S
t,j t?S,j?{1,2,3}
1 2n
Secondly this proof computes commitments for{C = GSCom(? ,open )} .
? j ? j=1...7
j j
Thirdly this proof chooses ? ?G and ??Z , computes C = GSCom(? , open )
7 p ? 7 ?
7 7
and C = GSCom(? , open ), and then constructs a NIZK proof π proving
? ? ? theta
? ?
the following equations.
e(?,h) =e(Ω?? ,? )? (4.12)
21 1
e(? ,u) =e(g,? )?
21 3
e(? ,h) =e(U ,? )e(? ,U )?
4 0 22 5 1
e(? ,h) =e(? ,? )?
5 6 22
?1
e(? ,? )=1 ?
21 G
22 T
? =1?
?
e(g ,?/? )=1
7 G
T
There are two cases for this proof.36 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
EQ
- IfR =R , this proof computes commitment C = GSCom(W, open )
W W
EQ
where W=BWWitGen(pk, R , i, m, X, ?) and then computes proofs π ,
x
i
{π } such that
X t?S,j=1,2
t,j
e(? ,h )=e(X ,h )·e(W,h)? (4.13)
6 i i,1 n
e(X ,h )·e(X ,h)?
i,2 1 i,1
e(X ,h )·e(X ,h)
i,2 2n i,3
Theproofisπ =({C } ,{C } ,C ,C ,π ,π ,{π } ,).
x t?S,j=1,2,3 ? j=1,...,8 W ? ? x x t?S,j=1,2
t,j j i t,j
EQ
- IfR =R , this proof computes commitments{C } to (W , W , W ,
W j=0,...,4 0 1 2
j
W , W ) and generates proofs π ,π satisfying
3 4 x W
i
?1
e(? ,h )·e(X ,h ) =e(W ,h )·e(W ,h)? (4.14)
6 i i,1 n 1 n 4
e(W ,W )=e(g ,h)?
1 0 1
e(W ,h)·e(W ,h )?
1 2 1
e(W ,h )=e(W ,h )
1 2n 3 1
andalsogeneratesproof{π } . Theﬁnalproofisπ=({C } ,
X t?S,j=1,2 x t?S,j=1,2,3
t,j t,j
{C } ,{C } , C ,π , π ,{π } ).
? j=1,...,8 W j=0,...,4 x x t?S,j=1,2
? ?
j j i t,j
BWPProve2(params,pk,R,i,m,,X,?). Similar to BWPProve1, ﬁrstly this proof com-
putes commitments{C } , C , as well as proofs π and π . Then there are
? j=1,...,8 ? ? x
j i
four cases in this proof.
IP
- IfR =R , compute a commitment C = GSCom(W,open ) where W =
W W
IP
BWPWitGen(pk,R ,0,m,X,?) and compute a proof π such that
X
n
Y
x
j
e(? , h )=e(W,h) (4.15)
6
j
j=1
Finally, the proof π = ({C } , C , C ,π , π ).
? j=1,...,8 W ? ? X
j
IP
- IfR = R , compute C = GSCom(g, open ), {C } where W =
g g W j=0,...,4 j
j
IP
BWPWitGen(pk,R , 0, m, X, ?), and select T? mathbbG and compute a
2
proof π such that
X
e(W ,W )=e(g ,T)? (4.16)
1 0 1
e(W ,h)=e(W ,h )?
1 2 1
e(W ,h )=e(W ,h )?
1 2n 3 1
?
e(g ,T/h) =1 ?
G
T
n
Y
x
j
e(? , h )=e(W ,h )·e(W ,h)
6 1 n 4
j
j=1
Finally, the proof π = ({C } ,{C } , C ,π , π ).
? j=1,...,8 W j=0,...,4 ? ? X
j j4.1. BLOCK-WISE P-SIGNATURES BASED ON ASYMMETRIC PAIRINGS 37
EQ
- IfR =R compute a commitment C = GSCom(W,open ) where W =
W W
x
EQ i
BWPWitGen(pk,R ,i,m,X,?), C = GSCom(X , open ) where X = h ,
X i X i
i i 1
and compute proofs π and π such that
W X
e(? ,h )=e(g ,X )·e(W,h)? (4.17)
6 i n i
? x
i
e(g ,X /h )=1
i G
1 T
Finally, the proof π = ({C } , C , C , C ,π , π ,π ).
? j=1,...,8 W X W X
? ?
j i
EQ EQ
- IfR =R , compute{ C } where W = BWPWitGen(pk, R , 0,
W j=0,...,4 j
j
x
i
m, X, ?), C = GSCom(X , open ) where X = g , and compute proofs
X i X i
i i 1
π ,{π } π , π such that
X W j=1,...,3 X g
j i
i,W
?1
e(? ,h )·e(X ,h ) =e(W ,h )·e(W ,h)? (4.18)
6 i i n 1 n 4
e(W ,W )=e(g ,h)?
1 0 1
e(W ,h) =e(W ,h )?
1 2 1
e(W ,h )=e(W ,h )?
1 2n 3 1
? x
i
e(g ,X /h ,)=1 ?
i G
1 T
?
e(g ,T/h) =1
G
T
Finally,theproofπ=({C } ,{C } ,C ,C ,π ,π ,{π } ,
? j=1,...,8 W j=0,...,4 X ? ? X W j=1,...,3
j j i i,W j
π ).
?
?
BWPEqCommProve(params,m,open,open). Takentwoopensopen andopen ,two
X Y
commitmentsC andC canberespectively computedbyC =GSCom(X,open )
X Y X X
and C =GSCom(Y, openY). To prove X =Y, we can construct an non-interactive
Y
zero-knowledge proof C ·C =1 based on SXDH assumption.
X Y G
T
Result of our modiﬁcation on block-wise P-signatures.
Essentially our proposed block-wise P-signatures are based on Izabach`ene et al.’s idea
i
(? )
and extend the public key set with h = h for i? [1,...,n,n +2,...2n]. In this way
i
we successfully untwist the commutable property of Type-1 pairings and make block-wise
P-signature be constructed on Type-3 pairings. Figure 4.1 describes group elements used
in G and G . From the table it is clear that group elements of public key set pk = (u,
1 2
Ω, ?, U , U ,{g} ,{h} ), signature set ? = (? , ? , ? , ? , ? ,
0 1 i i?[1,2n]/{n+1} i i?[1,2n]/{n+1} 1 21 22 3 4
? , ? ) and witness set W = (W , W , W , W , W ) are now working in two di?erent
5 6 0 1 2 3 4
groups G and G of asymmetric pairings, instead of working in a single group G of
1 2
symmetric pairings. From theview pointof used group elements, our proposed block-wise
P-signatures use more group elements than Izabach`ene et al.’s construction. However,
from the view point of Type-3 pairing implementation, elements in group G is operated
1
on E(F ) and elements in groupG is operated on E(F ); hence our modiﬁcation can get
k
q 2
q
beneﬁt from the elements working on relatively small ﬁeld E(F ). The detailed e?ciency
q
comparison will be discussed in Section 4.3.38 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
Figure 4.1: Elements used inG andG of proposed block-wise P-signatures
1 2
Function elements used inG elements used inG
1 2
F?signatures
KeyGen g h
n
Sign g,U ,{g} h,u
0 i
1
n
Verify g,U ,A,Ω,{g} ,? ,? ,? ,? h,u,U ,? ,? ,?
0 i 21 4 5 6 1 1 22 3
1
n
WitGen?EQ {g} -
i
1
n
WitGen?EQ g,g ,{g} h
2n i
1
n n
WitGen?IP {g} ,{W} -
i i
1 1
n n
WitGen?IP g,g ,{g} ,{W} h
2n i i
1 1
WitVerify?EQ g ,? ,W h,h ,h
1 6 i n
WitVerify?EQ g ,g ,? ,W ,W ,W ,W h,h ,h ,h ,h ,W
1 n+1?i 6 1 2 3 4 1 i n 2n 0
n
WitVerify?IP ? ,W h,{h}
6 i
1
n
WitVerify?IP g ,? ,W ,W ,W ,W h,h ,h ,{h} ,W
1 6 1 2 3 4 i 2n i 0
1
4.2 Security consideration of our proposed block-wise P-
signatures
In this section we examine the security of our proposed block-wise P-signatures based on
asymmetric pairings. Please refer to Figure 4.2, this graph illustrates the logic of proof
reduction of our proposed block-wise P-signatures. Essentially, the left side of this graph
shows the way to prove that the original block-wise P-signatures is secure. In Section 3.4,
we have reviewed the attack model of block-wise P-signatures given by Izabach`ene et al.
[4], which contains three types of forgeries attacks. The block-wise P-signatures based on
symmetric pairings are proved secure against all three kinds of forgeries attacks; to be
morespeciﬁc, Type-I forgeries areproved secureon thesecurity assumption ofq?HSDH
problemwhileType-IIforgeriesareprovedsecureontheassumptionofFlexDH problem.
Moreover, all four di?erent cases of Type-III forgeries are proved secure on the security
assumption of n?FlexDHE problem.
Due to the fact that our asymmetric block-wise P-signatures are essential extended
from the original symmetric ones, the idea of deﬁned attack models and proofs still work
on our designed scheme. However, the security assumptions of q? HSDH, FlexDH
1
and n?FlexDHE are deﬁned in single group G; to well ﬁt into our requirements in
asymmetric pairings, we extend these deﬁnitions to asymmetric pairings and prove the
equivalence of them.
Deﬁnition4.1. Theq-ExternalHiddenStrongDi?e-Hellmanproblem(q-XHSDH)
This deﬁnition extends Deﬁnition 2.4 from group security assumption to asymmetric pair-
1
Please refer q? HSDH problem to Deﬁnition 2.4, FlexDH problem to Deﬁnition 2.5, and n?
FlexDHE problem to Deﬁnition 2.7.4.2. SECURITYCONSIDERATIONOFOURPROPOSEDBLOCK-WISEP-SIGNATURES39
Figure 4.2: Security reduction from symmetric pairings to asymmetric pairings
ings. given two groupG andG , and deﬁne bilinear map e:G ?G ??G . q-XHSDH
1 2 1 2 T
assumes q-HSDH problem is hard both in G and G
1 2
Lemma 4.1. if q-HSDH is secure against forgery, then q-XHSDH is also secure against
forgery.
Proof sketch. Assume an adversaryA want to solve q?HSDH problem with the
help of procedureB that can solve q?XHSDH problem. Without loss of generality
we make an assumption that the oracle ofA is set with two group generator such that
g? G and h? G ; in other words, once procedureB requires a oracle query, oracleA
1 2
c c
? 1/(?+c ) c i 1/(?+c ) c i
i i i i
will chooses c ? Z and answers (g , g , u ) and (h , h , u ) by asking
i
p 1 2
1/(?+c) c
his oracle twice. After q times’ oracle queries, procedureB outputs a tuple (g , g ,
c 1/(?+c) c c 1/(?+c) c c
u , h , h , u ) where c6= c . Then the adversaryA outputs (g , g , u ) as a
i
1 2 1
forgery to q?HSDH problem.
c
1/(?+c ) c i
i i
Here we argue that making the oracle ofA answer two tuples (g , g , u )
1
c
1/(?+c ) c i
i i
and (h , h , u ) will not increase the probability of success for procedureB to
2
1/(?+c) c c 1/(?+c) c c
output the tuple (g , g , u , h , h , u ). The reason is that (g, u ) and (h,
1
1 2
u ) are randomly chosen from G and G , which means procedureB simultaneously and
2 1 2
independently deals with two q?HSDH problems. Therefore, the hardness of solving
q?XHSDH problem is equal to solving the problem of q?HSDH.
Deﬁnition4.2. The Flexible External Di?e-Hellman problem (FlexXDH), given
a b 3 a b 3 ?
two groups G and G of order p, (g, g , g )?G and (h, h , h )?G where a,b?Z .
1 2
1 2 p
? ?a ?b ? ?a ?b
ﬁnding tuples (g , g , g ) and (h , h , h ) such that ?6=0.
Lemma 4.2. if FlexDH is secure against forgery, FlexXDH is also secure against forgery.
Proof sketch. Similarly let the adversaryA’s oracle with two group elements g?G
1
and h?G . A uses a procedureB which can solve the FlexXDH problem, and answer
2
? a b a
i i i
procedureB’s oracle queries by choosing a ,b ?Z and response (g, g , g ) and (h, h ,
i i
p40 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
b ? ?a ?b ? ?a ?b
i
h ). After q times’ queries, procedureB output{(g , g , g ), (h , h , h )} such that
? ?a ?b
?6=0. Finally the adversary outputs (g , g , g ) as the answer to FlexDH problem.
Deﬁnition 4.3. The Flexible External n-Di?e-Hellman Exponent Problem (n-
2n
FlexXDHE), given two group G and G of order p, (g, g , ..., g , g , ..., g )?G ,
1 1 1 n n+2 2n
1
i i
2n (? ) (? ) ?
(h, h , ..., h , h , ..., h )? G such that g = g and h = h where ?? Z
1 n n+2 2n i i
p
2
? ? ? ?
? ? ?
and i?[1,2n]\{n+1}, compute triples (g ,g ,g ) and (h ,h ,h ) where ??Z ,
n+1 2n n+1 2n p
n+1 n+1
? ?
g =g and h =h .
n+1 n+1
Lemma 4.3. if n?FlexDHE is secure against forgery, n?FlexXDHE is also secure
against forgery.
Proof sketch. Similarly let the adversaryA’s oracle with two group elements g?G
1
and h? G . A uses a procedureB which can solve the n?FlexXDHE problem, and
2
?
answer procedureB’s oracle queries by choosing ? ? Z and response (g, g , ..., g ,
j 1 n
p
i
(? )
2n 2n
j
g , ..., g )? G and (h, h , ..., h , h , ..., h )? G such that g = g and
n+2 2n 1 n n+2 2n i
1 2
i
(? ) ? ? ? ?
? ?
j
h =h . After q times’ queries, procedureB output{(g , g , g ), (h , h , h )}
i
n+1 2n n+1 2n
n+1 n+1
? ? ? ? ?a
where ?? Z , g = g and h = h . Finally the adversary outputs (g , g ,
n+1 n+1
p
?b
g ) as the answer to n?FlexDHE problem.
Theorem4.1. Our asymmetric block-wise P-signatures are proved secure on the hardness
of q-XHSDH problem, FlexXDH problem and n-FXDHE problem.
Proof sketch. We have extended the security assumptions of q?HSDH, FlexDH
andn?FlexDHEtosecurityassumptionsofq?XHSDH,FlexXDH andn?FlexXDHE,
and prove the security of them. Therefore, our asymmetric pairing based block-wise P-
signature can be proven to be secure against all three types of forgery attacks. The prove
can be slightly modiﬁed from the original proofs provided by [4] and hence we will omit
the proofs here. In this way, the reduction proof of right-hand side of Figure 4.2 can be
constructed, and our proposed block-wise P-signatures based on asymmetric pairings can
be proved secure.
4.3 E?ciencyanalysisofourproposedblock-wiseP-signatures
This section focuses on evaluating e?ciency of our proposed asymmetric pairing based
block-wiseP-signaturesbothintheoretical partandinpracticalpart. Toevaluatetheoret-
ical performance of proposed asymmetric pairing based block-wise P-signatures, without
lossofgenerality wecalculate thegroupelements usedinpairingcomputation. Intermsof
practical implementation, we implement block-wise P-signatures both in symmetric pair-
ings and asymmetric pairings, and then measure the running time of them for e?ciency
comparison.4.3. EFFICIENCYANALYSISOFOURPROPOSEDBLOCK-WISEP-SIGNATURES41
Figure 4.3: The number of group elements used in Type-1 pairing-based and Type-3
pairing-based block-wise P-signatures – F-signature part
Function BWPS in Type-1 BWPS in Type-3
(# of elements inG) (# of elements inG ) (# of elements inG )
1 2
F?signatures
KeyGen 1 1 1
Sign n+3 n+2 2
Verify n+12 n+8 6
WitGen?EQ n n 0
WitGen?EQ n+1 n+2 1
WitGen?IP 2n 2n 0
WitGen?IP 2n+2 2n+2 1
WitVerify?EQ 6 3 3
WitVerify?EQ 12 7 6
WitVerify?IP n+3 2 n+1
WitVerify?IP n+8 6 n+4
4.3.1 Theoretical analysis of proposed block-wise P-signatures
Here we compare theoretical performance of block-wise P-signatures. Firstly let us exam-
ine the performance of F-unforgeable signatures in block-wise P-signatures. Please refer
to Figure 4.3, roughly the result can be classiﬁed into three cases. The ﬁrst case, such as
EQ
key generation, signature generation, witness veriﬁcation ofR and witness veriﬁcation
IP
ofR , the Type-3 setting use one more group element, h?G , than the Type-1 setting.
2
EQ
Next, the second case, such as signature veriﬁcation, witness generation ofR , and wit-
IP
ness generation ofR , the asymmetric setting use two more group elements, h,? ?G ,
22 2
EQ
than the symmetric setting. The third case, such as witness generation ofR , witness
IP EQ IP
generation ofR , witness veriﬁcation ofR , and witness veriﬁcation ofR , , Both
the asymmetric setting and symmetric setting use the same number of group elements
since the asymmetric setting only use one group generator, g?G or h?G , and do not
1 2
contain thecomputation of? ?G and? ?G . Inshort, thee?ciency of ourdesigned
21 1 22 2
F-unforgeable signature are theoretically competitive to the symmetric one.
In terms of signature proof generation and veriﬁcation, please refer to Figure 4.4 and
Fig 4.5, our designed block-wise P-signatures show signiﬁcant improvement in theoretical
analysis. The major advantage comes from modifying the essential component, Groth-
Sahai proof[3] of signature proofgeneration, from DLIN-based structures toSXDH-based
structures. It is evident that the SXDH-based Groth-Sahai proofs use less group ele-
2
ments than their DLIN-based counterpart. Signature proof generation of block-wise
2
Please see the used group elements comparison between DLIN setting and SXDH setting in Figure 3.3
and Figure 3.2.42 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
Figure 4.4: The number of group elements used in Type-1 pairing-based block-wise P-
signatures – Signature proof part[4]
Function Size Generation Veriﬁcation
(# of elements inG) (# of MultiExps) (# of Pairings)
Algorithm SigProve
1
EQ
R=R 80 80· MultiExp 621· Pairing
EQ
R=R 101 101· MultiExp 828· Pairing
Algorithm SigProve
2
IP
R=R 65 66· MultiExp 558· Pairing
IP
R=R 104 105· MultiExp 828· Pairing
EQ
R=R 77 77· MultiExp 477· Pairing
EQ
R=R 107 107· MultiExp 846· Pairing
Figure 4.5: The number of group elements used in Type-3 pairing-based block-wise P-
signatures – Signature proof part
Function Size Generation Veriﬁcation
(# of elements in (# of MultiExps) (# of Pairings)
G andG )
1 2
Algorithm SigProve
1
EQ
R=R 63 63· MultiExp 276· Pairing
EQ
R=R 77 77· MultiExp 368· Pairing
Algorithm SigProve
2
IP
R=R 53 54· MultiExp 248· Pairing
IP
R=R 83 84· MultiExp 368· Pairing
EQ
R=R 61 61· MultiExp 212· Pairing
EQ
R=R 85 85· MultiExp 376· Pairing
P-signatures use three di?erent kinds of equations, which are pairing product equations,
linear pairingequations andlinear multi-scalar multiplication equations. InDLIN setting,
pairing product equations cost nine group elements, linear pairing equations cost three
group elements, and linear multi-scalar multiplication equations cost two group elements.
However, SXDH setting requires less to construct proofs: pairing product equations cost
eight group elements, linear pairing equations cost two group elements, and linear multi-
scalar multiplication equations cost onegroupelements. Suchthechangesigniﬁcant a?ect
the theoretical e?ciency of signature proof generation and veriﬁcation.
EQ
For example, let us look the case ofR =R . In DLIN setting, we ﬁrstly need to
make (3+7+5+1)=16 commitments and require 16·3=48 group elements inG. And4.3. EFFICIENCYANALYSISOFOURPROPOSEDBLOCK-WISEP-SIGNATURES43
then the proof generation contains three pairing product equations, eight linear pairing
product equations and one linear multi-scalar multiplication equation, which totally cost
(3·9+8·3+1·2) = 53 group elements in G. Therefore, constructing signature proofs
totally cost 48+53 = 101 group elements in G. However, in SXDH setting, we ﬁrstly
need to make (3+8+5+1)=17 commitments and require 17·2=34 group elements in
G andG . And then the proof generation contains three pairing product equations, nine
1 2
linearpairingproductequationsandonelinearmulti-scalarmultiplicationequation, which
totally cost (3·8+9·2+1·1)=43 group elements inG andG . Therefore, constructing
1 2
signatureproofstotally cost34+43 =77groupelementsinG andG . TheSXDHsetting
1 2
save 24 group elements than DLIN setting, which means nearly 23.76%’s enhancement.
In fact, using less group elements means using less multi-exponential computation and
multi-exponential computation take the major computation time in most cryptographic
algorithms; hence this improvement is enormous. Overall in theoretical analysis, Please
refer to Figure 4.6, our new signature proof generation based on SXDH can save nearly
20% of multi-exponential computation.
Figure 4.6: E?ciency comparison between DLIN-based and SXDH-based signature proof
generation
Function (# of MultiExp in (# of MultiExp in Improvement (%)
DLIN-based proof SXDH-based proof
Algorithm SigProve
1
EQ
R=R 80 63 21.25
EQ
R=R 101 77 23.76
Algorithm SigProve
2
IP
R=R 66 54 18.18
IP
R=R 105 84 20
EQ
R=R 77 61 20.77
EQ
R=R 107 85 20.56
EQ
In terms of signature proof veriﬁcation, takeR=R for example, naive veriﬁcation
procedure needs 621 pairing computation whether in DLIN setting while SXDH setting
only require 276 pairings. The amount of pairing computation between these two settings
present a enormous di?erence.
Overall in theoretical analysis, our proposed block-wise P-signatures cost competitive
groupelements inthepartofF-unforgeablesignatureandachieve signiﬁcantimprovement
in the part of signature proof generation and veriﬁcation.
4.3.2 Practical analysis of asymmetric block-wise P-signatures
Afterseeingthetheoreticale?ciencyanalysisofblock-wiseP-signatures,inthissection,we
implement block-wise P-signatures both based on Type-1 pairings and Type-3 pairings.44 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
Our experiment environment uses computer with Intel Core i5-520M processor ( 3MB
cache and 2.40 GHz) and 2.92 GB random access memory (RAM). The operation system
is Microsoft Windows 7 32-bit. Moreover, we adopt MIRACL Crypto. SDK to do pairing
computation.
MIRACL SDK Library.
MIRACL SDK Library [34], stands for Multi-precision Integer and Rational Arithmetic
CryptographicLibrary,isprovidedbyCertivox andisapowerfullibraryforimplementing
cryptographic application. MIRACL library is well-known for its supports for state-of-
the-art cryptographic primitives, including implementations of elliptic curves and bilinear
pairings. In the implementation of bilinear pairings, MIRACL library supports Type-1
pairings and Type-3 pairings respectively. For Type-1 pairings, two kinds of pairing-
m
friendly curves are provided, which are EtaT pairings over GF(2 ) and Tate pairing over
GF(p) respectively. And both of two pairings implementation support security degree of
AES-80 and AES-128. In terms of Type-3 pairings, there are ﬁve pairing-friend curves
implemented in MIRACL library, which are
- Cocks-Pinch (CP)[35] curve supports security degree of AES-80.
- Miyaji-Nakabayashi-Takano (MNT)[36] curve supports security degree of AES-80.
- Barreto-Naehrig (BN)[37] curve supports security degree of AES-128 and AES-192.
- Kachisa-Schaefer-Scott (KSS)[38] curve supports security degree of AES-192.
- Barreto-Lynn-Scott (BLS)[39] curve supports security degree of AES-256.
From the above pairing curves provided by MIRACL library, it is evident that Type-3
pairings give more ﬂexibility from di?erent security degree. In fact, for security degree
higher than AES-128 there exists no e?cient curves for Type-1 pairings.
Experiment result
In our experiment, considering limitation of pairing curves provided by MIRACL library
andpractical security issue, wechoose curvesof TatePairing-128 andBN-128 respectively
toimplementType-1pairingbasedblock-wiseP-signaturesandourproposedscheme. And
tosetabenchmarkforeverycasesinblock-wiseP-signatures,wechooseonemessageblock
for the experiment, even though our implemented block-wise P-signatures can support
multiple message blocks. Moreover, to eliminate the random bias that could happen in
our testing environment, our experiment repeats 20 runs and then do statistical analysis
in IBM SPSS software. the detailed experiment results are collected in Appendix A.1 and
Appendix A.2, and the standard deviation of our experiments show negligibly small for
the performance of block-wise P-signatures based on Type-1 pairings and Type-3 pairings
to be evidently distinguished.4.3. EFFICIENCYANALYSISOFOURPROPOSEDBLOCK-WISEP-SIGNATURES45
Figure4.7: E?ciencycomparisonbetweenType-1pairingbasedandType-3pairingbased
block-wise P-signatures (using pairing curves BN-128)
ID Function BWPS in Type-1 BWPS in Type-3 Improvement
(/sec.) (/sec.) (%)
F?signatures
1 Sign 0.3013 0.0492 83.67
2 Verify 1.2829 0.7039 45.13
3 WitGen?EQ 0.044 0.009 79.54
4 WitGen?EQ 0.0141 0.0492 85.04
5 WitGen?IP 0.043 0.0101 76.51
6 WitGen?IP 0.1002 0.0174 82.63
7 WitVerify?EQ 0.4273 0.2331 45.44
8 WitVerify?EQ 1.2307 0.6985 43.24
9 WitVerify?IP 0.2671 0.1564 41.44
10 WitVerify?IP 1.1901 0.6931 41.76
SigProve
1
11 SigProve ?EQ >189 4.6203 >97.55
1
12 SigProve ?EQ >252 6.0987 >97.57
1
13 SigVerify ?EQ >252 13.4915 >94.64
1
14 SigVerify ?EQ >336 18.4456 >94.51
1
SigProve
2
15 SigProve ?EQ >152 4.1008 >97.3
2
16 SigProve ?EQ >224 6.1149 >97.27
2
17 SigProve ?IP >128 3.5716 >97.2
2
18 SigProve ?IP >232 6.4235 >97.23
2
19 SigVerify ?EQ >209 12.1482 >94.18
2
20 SigVerify ?EQ >308 18.4185 >94.01
2
21 SigVerify ?IP >176 10.7983 >93.86
2
22 SigVerify ?IP >319 18.8304 >94.09
2
Theexperiment results arecollected in Figure4.7. For theF-unforgeable signatures of
block-wise P-signatures, Type-3 pairing-based implementation shows enormous e?ciency
while comparing with Type-1 pairing-based implementation. From theoretical analysis of
F-unforgeable in Figure 4.3, it is clear that Type-3 construction costs slightly more group
elements than Type-1 construction; however, the experiment shows extreme e?ciency
of Type-3 construction. Here we would like to discuss the e?ciency of F-unforgeable
signatures in two groups. The ﬁrst group contains signature generation Sign and four
casesofwitnessgenerationWitGen?EQ,WitGen?EQ,WitGen?IP andWitGen?IP.
The similarity of functions in the ﬁrst group is that the majority of their computation is
on multiplication of group elements. From the experiment result, it is clear that functions46 CHAPTER 4. Asymmetric pairing based block-wise P-signatures
in the ﬁrstgroup which are ported to Type-3 construction can save approximately 76% to
85%’s runningtime, whichimplicitly illustrateselements multiplication inType-3pairings
is enormously e?cient while comparing to Type-1 pairings. The second group contains
signature veriﬁcation Verify and four cases of witness veriﬁcation WitVerify? EQ,
WitVerify?EQ, WitVerify?IP and WitVerify?IP. These functions take their
major time on doing pairing computation. The experiment result shows transferring F-
unforgeable signatures from Type-1 to Type-3 can save nearly 41% to 45%’s running
time, which is also a great improvement. The result also implicitly illustrates that doing
pairing computation in Type-3 pairings is twice as fast as doing pairing computation in
Type-1 pairings. In short, even though it increases several group elements while porting
F-unforgeable signatures to Type-3 pairings, e?ciency can gain signiﬁcant beneﬁt from
the porting work.
In terms of signature proof generation and veriﬁcation, Type-3 pairing-based imple-
mentation showstremendous e?ciency whilecomparing withType-1pairing-based imple-
mentation. The e?ciency can be analyzed from a general view, which is to compare the
theoretical analysis with practical analysis. From Figure 4.4 and Figure 4.5 we have un-
derstoodthefundamentaltechniquesofsignatureproofgenerationandveriﬁcationisquite
di?erent; Type-1 construction is based on DLIN-based Groth-Sahai proofs while Type-3
construction is based on SXDH-based Groth-Sahai proofs. It is clear that SXDH-based
Groth-Sahai proofs require less group elements than DLIN-based one; therefore, Type-3
based signature proof generation and veriﬁcation are inherently at advantageous position,
approximately20%fasterthanType-1constructionintheoreticalanalysis. Moreover, con-
structing signature proof and doing veriﬁcation in block-wise P-signature also inherently
contains huge number of element multiplication and pairing computation, which means a
great deal of running time in generating proof and veriﬁcation. From our experiment of
even only one message block, signature proof generation and veriﬁcation take at least 2
minutes to generate a signature proof of SigProve ?IP and take at least 3 minutes to
2
do veriﬁcation of SigVerify ?IP, which is not an a?ordable running time in practical
2
application. However, Type-3 construction shows acceptable running time in signature
proof generation and veriﬁcation, which take about 3.5 seconds in signature proof gen-
eration of SigProve ? IP and about 10.7 seconds in veriﬁcation procedure. Overall
2
in signature proof generation and veriﬁcation, the practical experiment result shows in
Figure 4.7 is consistent with theoretical analysis shows in Figure 4.6; moreover, Type-3
construction dramatically extend the advantage of e?ciency to approximately 93%?97%
while comparing with Type-1 construction.Chapter 5
Optimization of Block-wise
P-signatures
We have successfully redesigned block-wise P-signatures based on asymmetric pairings,
and our proposed new scheme achieves signiﬁcant improvement in e?ciency. Nonetheless,
thee?ciency of ourdesignedblock-wise P-signaturescan befurtherimproved byapplying
optimization techniquesinourdesign. Inthischapterwedescribethetechniquesweuseto
improve asymmetric pairing based block-wise P-signatures and measure the performance
of them.
InChapter2.4wehavereviewedtwooptimizationtechniques,whichareﬁxedargument
optimization and calculation of pairing product respectively. These two optimization
techniques describe how the ﬁxed elements inG andG result in performance di?erence.
1 2
Here we focuses on ﬁxed argument optimization and conclude them into three di?erent
cases. The ﬁrst case is that if both arguments X?G and Y ?G are ﬁxed, the power
1 2
z ?
of pairing product e(X,Y) for some z?Z can be precomputed. The second case shows
p
that if the left-hand side argument X?G is ﬁxed, the pairing computation e(X,·) can
1
be precomputed. The third case is that if the left-hand side argument X? G is ﬁxed,
1
z ?
thecomputation ofgroupelementmultiplication X forsomez?Z can beprecomputed.
p
With these three observation, we try to improve our proposed block-wise p-signatures.
5.1 Optimization of our proposed block-wise P-signature
To apply these three optimization techniques in block-wise p-signatures, it is necessary
to examine each function algorithm to ﬁnd out the repeated pattern appeared in pairing
computation, so that our proposed scheme can be further improved by the technique of
ﬁxed argument optimization. After ﬁne tuning every function algorithms, an optimized
asymmetric pairing based block-wise P-signature is described as follows.
4748 CHAPTER 5. Optimization of block-wise P-signatures
Figure 5.1: Optimization example – Signature veriﬁcation of block-wise P-signatures be-
fore/after optimization
BWPS in Type-3 before optimization BWPS in Type-3 after optimization
e(?,h) =e(Ω·? ,? ) e(g,?) =e(Ω·? ,? ),
21 1 21 1
e(? ,u)=e(g,? ) e(? ,u)=e(g,? ),
21 3 21 3
e(? ,h) =e(U ,? )·e(? ,U ) e(g,? )=e(? ,U )·e(U ,? ),
4 0 22 5 1 4 21 0 1 5
e(? ,h) =e(? ,? ) e(g,? )=e(? ,? ),
5 6 22 5 21 6
?1 ?1
e(? ,? )=1 e(? ,? )=1 ,
21 G 21 G
22 T 22 T
Optimization summary.
Our naively porting to type-3 pairing based block P-signatures leaves a signiﬁcant space
for optimization. The ﬁrst observation is that group generators g? G and h? G are
1 2
repeatedlyusedintheveriﬁcationprocedure,includingsignatureveriﬁcation, witnessveri-
ﬁcationandproofveriﬁcation, whichleaves anopportunityforargumentpre-computation.
However, in implementation of Type-3 pairingsG ?G ??G , pairing computation of
1 2 T
ﬁxedelementsinG canbespedupwithﬁxedargumentpre-computationtechnique. With
1
thisobservation, wecouldalignall equationsinveriﬁcation procedurestotheformofﬁxed
left-hand side argument. For example in signature veriﬁcation, please refer to Figure 5.1,
e(? ,h) in the third equation and e(? ,h) in the fourth equation can be transferred into
4 5
the form of e(g,? ) and e(g,? ), in this way the form of e(g,·) and can be precomputed
4 5
with ﬁxed argument optimization in implementation. Similarly the case e(·,? ) can be
22
also aligned as e(? ,·). However, since our working environment is in asymmetric pair-
21
ings, which group elements inG andG cannot be arbitrarily exchanged, it is necessary
1 2
to reconsider in which group arguments work. Fortunately the publickey extension of our
proposed block-wise P-signatures provides us a ﬂexible way to decide in which group the
argumentworkwithextraburden;hencethealgorithmre-adjustingcanbeeasilyachieved.
a b b
The second issue is to decide which pairing form, e(A =g ,B =h ) or e(B =g ,A =
a
h ), can receive most e?ciency enhancement for our proposed block-wise P-signatures.
To achieve optimized performance of pairing pre-computation, it is critical to identify the
group elements that are frequently used for the computation of element multiplication on
elliptic curves; so that we can decide in which group the arguments work. It is obvious
that generators g?G and h? G are most frequently used for element multiplication.
1 2
i i
(? ) (? )
The generation of public key set g = g for i? [1,...,n,n+2,...2n] and h = h for
i i
i?[1,...,n,n+2,...2n] areclear examples. In fact, Among all arguments in the optimized
block-wise P-signatures, we found arguments g, h, g , h and h could be the most
1 1 2n
used arguments for all computation. Therefore, these arguments can be precomputed in
implementation.
The last optimization technique is to ﬁnd pairing form where arguments both in G
1
and G are ﬁxed, so that the power of pairing can be precomputed. In our examination
25.1. OPTIMIZATION OF OUR PROPOSED BLOCK-WISE P-SIGNATURE 49
x ?
i
thereshowsonlyonecasee(g ,h ) wherex istheithmessageblockamongallfunctions
1 n i
is repeatedly used; With this observation, we can conclude the powering pre-computation
of e(g ,h ) show less e?ciency improvement for our proposed block-wise P-signatures.
1 n
Our proposed optimized block-wise P-signatures.
With the above three observations we readjust our Type-3 pairing based block-wise P-
signatures.
k
BWPSigSetup(1 ). Taken security parameter k, this function generates params = (n,
G , G , G , g, h, e, f) where G and G are cyclic groups of prime order p and
1 2 T 1 2
generatedbygeneratorsgandh,e: G?G ??G isabilinearmapandU=(U ,U )
1 2 T 1 2
is common reference string (CRS) for SXDH-based Groth-Sahai proof.
BWPKeyGen(params). Choosing ?, ?, ?, ? ? Z , u ? G , U ? G , computing
p 2 0 2
i i
? ? ? (? ) (? )
Ω = g , ? = h , U = g , g = g for i? [1,...,n,n+2,...2n] and h = h for
1 i i
i? [1,...,n,n+2,...2n]. The secret-key sk = (?, ?, ?) and public-key pk = (u, Ω,
?, U , U ,{g} ,{h} ).
0 1 i i?[1,2n]/{n+1} i i?[1,2n]/{n+1}
BWPSign(params,sk,m). Taken message m = (m ,...,m ), the signer ﬁrstly chooses
1 n
Q
m
n j m
r m n r
1
r? Z and computes V = h · h =h ···h ·h . Secondly the signer
p
j=1 n+1?j n 1
chooses c?Z and computes ? = (? , ? , ? , ? , ? , ? , ? , r) where
p 1 21 22 3 4 5 6
?/?+c
? =h , (5.1)
1
c
? =g ,
21
c
? =h ,
22
c
? =u ,
3
? c
? =(U ·V ) ,
4 0
c
? =V ,
5
? =V
6
BWPVerify(params,pk,m,?). Receiving message m = (m ,...,m ) and ? = (? , ? ,
1 n 1 21
Q
m
n j
r
? , ? , ? , ? , ? , r), the veriﬁer accepts the signature if ? =g · g and
22 3 4 5 6 6
j=1 n+1?j
e(g,?) =e(Ω·? ,? ), (5.2)
21 1
e(? ,u)=e(g,? ),
21 3
e(g,? )=e(? ,U )·e(U ,? ),
4 21 0 1 5
e(g,? )=e(? ,? ),
5 21 6
?1
e(? ,? )=1 ,
21 G
22 T
BWPWitGen(params,R,i,m,X,?). TakenrelationR,indexi,m=(m ,...,m ),X =
1 n
(x ,...,x ) and ? = (? , ? , ? , ? , ? , ? , r),
1 n 1 2 3 4 5 650 CHAPTER 5. Optimization of block-wise P-signatures
EQ
1. IfR=R and m =x where i?[1,n], compute the witness
i i
n
Y
m
r j
W =h · h . (5.3)
i
n+1?j+i
j=1,j6=i
EQ
2. IfR=R and m 6=x , wherei?[1,n], compute the witness W = (W , W ,
i i 0 1
W , W , W ) where
2 3 4
1/(m ?x )
i i
W =g , (5.4)
0
(m ?x )
i i
W =h ,
1
1
(m ?x )
i i
W =h ,
2
(m ?x )
i i
W =h
3
2n
n
Y
m
r j
W =h · h
4
i
n+1?j+i
j=1,j6=i
IP
3. IfR=R , i=0, and , m·X =0, compute the witness
n
Y
x
i
W = W for each (5.5)
i
i=1
n
Y
m
j
r
W =h · h
i
i n+1?j+i
j=1,j6=i
IP
4. IfR =R , i = 0, and , m· X 6= 0, compute the witness W = (W , W ,
0 1
W ,W ,W ) where
2 3 4
1/(m ?x )
i i
W =g , (5.6)
0
(m ?x )
i i
W =h ,
1
1
(m ?x )
i i
W =h ,
2
(m ?x )
i i
W =h
3
2n
n
Y
x
i
W = W for each
4
4,i
i=1
n
Y
m
j
r
W =h · h
4,i
i
n+1?j+i
j=1,j6=i
BWPWitVerify(params,pk,i,X,W,?). Taken public-key pk, index i, X =(x ,...,x ),
1 n
witness W and a valid signature ? = (? , ? , ? , ? , ? , ? , ? ,r),
1 21 22 3 4 5 6
EQ
1. IfR=R and i?[1,n], output 1 if
x
i
e(g ,? )=e(g ,h ) ·e(g,W)
i 6 1 n5.1. OPTIMIZATION OF OUR PROPOSED BLOCK-WISE P-SIGNATURE 51
EQ
2. IfR=R and i?[1,n], parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
?x
i
e(g ,? ·h )=e(g ,W )·e(g,W ) (5.7)
i 6 n 1 4
n+1?i
e(W ,W )=e(g ,h),
0 1 1
e(g,W )=e(g ,W ),
1 1 2
e(g ,W )=e(g ,W ),
2n 1 1 3
IP
3. IfR=R and i=0, output 1 if
n
Y
x
i
e(g,W) =e( g ,? )
6
i
i=1
IP
4. IfR =R and i = 0, parse W = (W , W , W , W , W ) and check if the
0 1 2 3 4
following equations hold.
n
Y
x
i
e( g ,? )=e(g ,W )·e(g,W )
6 n 1 4
i
i=1
e(W ,W )=e(g ,h),
0 1 1
e(g,W )=e(g ,W ),
1 1 2
e(g ,W )=e(g ,W ),
2n 1 1 3
BWPSigObtain(pk,M ,open )?? MBPSigIssue(sk,V ,M ). this in-
part1 part1 part1 part2
teractive protocol provides users to acquire signatures from some organizations.
r
part1
1. the user chooses r ? Z and computes a commitment V = h ·
part1 p part1
Q
m
n j
1
h for message M =(m , ..., m ). The the user sets open
part1 1 n part1
j=1 n+1?j 1
?
= M =(m , ..., m , r ) and computes a witness-indistinguishable proof for
part1 1 n
1
Q
m
n j
r 1
part1
knowledge of M such that V =h · h .
part1 part1
j=1 n+1?j
part2
2. the signature issuer chooses r ,c?Z and computes
p
n
Y
m
j
V =V · h (5.8)
part1
n+1?j
j=n+1
?/(?+c)
? =h ,
1
c
? =g ,
21
c
? =h ,
22
c
? =u ,
3
r ? c
part2
? =(U (V·g ) ) ,
4 0
r c
part2
? =(V·g ) ,
5
r
part2
? =V·g
6
and return ?¯ =(? ,? ,? ,? ,? ,? ,? ,r ).
1 21 22 3 4 5 6 part252 CHAPTER 5. Optimization of block-wise P-signatures
3. the user outputs ? =(? ,? ,? ,? ,? ,? ,? ,r) where r =r +r .
1 21 22 3 4 5 6 part1 part2
BWPProve1(params,pk,i,S ={i},m,X,?). Taken m =(m ,...,m ), X =(x ,...,x )
1 n 1 n
and ? = (? , ? , ? , ? , ? , ? , ? , r). Firstly this proof needs to compute{ C
1 21 22 3 4 5 6 X ,j
t
xt x xt
t
= GSCom(X ,open )} where{(X ,X ,X ) =(h ,h ,h )} .
t,j x t,1 t,2 t,2 t?S
t,j t?S,j?{1,2,3} 1 2n
Secondly this proof computes commitments for{C = GSCom(? ,open )} .
? j ? j=1...7
j j
Thirdlythisproofchooses? =??Gand? =1?Z , computesC =GSCom(? ,
7 p ? 7
7
open ) and C = GSCom(? , open ), and then constructs a NIZK proof π
? ? ? ? theta
7 ? ?
proving the following equations.
e(g,? )=e(Ω·? ,? )? (5.9)
7 21 1
e(? ,u)=e(g,? )?
21 3
e(g,? )=e(? ,U )·e(U ,? )?
4 21 0 1 5
e(g,? )=e(? ,? )?
5 21 6
?1
e(? ,? )=1 ?
21 G
22 T
? =1?
?
e(g ,?/? )=1
7 G
T
There are two cases for this proof.
EQ
- IfR =R , this proof computes commitment C = GSCom(W, open )
W W
EQ
where W = BWWitGen(pk, R , i, m, X, ?) and then computes proofs π ,
x
i
{π } such that
X t?S,j=1,2
t,j
e(g ,? )=e(g ,X )·e(g,W)? (5.10)
i 6 n i,1
e(g ,X )·e(g,X )?
1 i,2 i,1
e(g ,X )·e(g,X )
2n i,2 i,3
Theproofisπ =({C } ,{C } ,C ,C ,π ,π ,{π } ,).
x t?S,j=1,2,3 ? j=1,...,8 W ? ? x x t?S,j=1,2
t,j j i t,j
EQ
- IfR =R , this proof computes commitments{C } to (W , W , W ,
W j=0,...,4 0 1 2
j
W , W ) and generates proofs π ,π satisfying
3 4 x W
i
?1
e(g ,? )·e(g ,X ) =e(g ,W )·e(g,W )? (5.11)
i 6 n i,1 n 1 4
e(W ,W )=e(g ,h)?
0 1 1
e(g,W )·e(g ,W )?
1 1 2
e(g ,W )=e(g ,W )
2n 1 1 3
andalsogeneratesproof{π } . Theﬁnalproofisπ=({C } ,
X t?S,j=1,2 x t?S,j=1,2,3
t,j t,j
{C } ,{C } , C ,π , π ,{π } ).
? j=1,...,8 W j=0,...,4 ? ? x x t?S,j=1,2
j j i t,j
BWPProve2(params,pk,R,i,m,,X,?). Similar to BWPProve1, ﬁrstly this proof com-
putes commitments{C } , C , as well as proofs π and π . Then there are
? j=1,...,8 ? ? x
j i
four cases in this proof.5.1. OPTIMIZATION OF OUR PROPOSED BLOCK-WISE P-SIGNATURE 53
IP
- IfR =R , compute a commitment C = GSCom(W,open ) where W =
W W
IP
BWPWitGen(pk,R ,0,m,X,?) and compute a proof π such that
X
n
Y
x
j
e( g ,? )=e(g,W) (5.12)
6
j
j=1
Finally, the proof π = ({C } , C , C ,π , π ).
? j=1,...,8 W X
? ?
j
IP
- IfR = R , compute C = GSCom(g, open ), {C } where W =
g g W j=0,...,4 j
j
IP
BWPWitGen(pk,R ,0,m,X,?),andselectT =h?mathbbG andcompute
2
a proof π such that
X
e(W ,W )=e(g ,T)? (5.13)
0 1 1
e(g,W )=e(g ,W )?
1 1 2
e(g ,W )=e(g ,W )?
2n 1 1 3
?
e(g ,T/h) =1 ?
G
T
n
Y
x
j
e( g ,? )=e(g ,W )·e(g,W )
6 n 1 4
j
j=1
Finally, the proof π = ({C } ,{C } , C ,π , π ).
? j=1,...,8 W j=0,...,4 ? ? X
j j
EQ
- IfR =R compute a commitment C = GSCom(W,open ) where W =
W W
x
EQ i
BWPWitGen(pk,R ,i,m,X,?), C = GSCom(X , open ) where X = h ,
X i X i
i i 1
and compute proofs π and π such that
W X
e(g ,? )=e(g ,X )·e(g,W)? (5.14)
i 6 n i
? x
i
e(g ,X /h )=1
i G
1 T
Finally, the proof π = ({C } , C , C , C ,π , π ,π ).
? j=1,...,8 W X ? ? W X
j i
EQ EQ
- IfR =R , compute{ C } where W = BWPWitGen(pk, R , 0,
W j=0,...,4 j
j
x
i
m, X, ?), C = GSCom(X , open ) where X = g , and compute proofs
X i X i
i i
1
π ,{π } π , π such that
X W j=1,...,3 X g
i,W j i
?1
e(g ,? )·e(g ,X ) =e(g ,W )·e(g,W )? (5.15)
i 6 n i n 1 4
e(W ,W )=e(g ,h)?
0 1 1
e(g,W )=e(g ,W )?
1 1 2
e(g ,W )=e(g ,W )?
2n 1 1 3
? x
i
e(g ,X /h ,)=1 ?
i G
1 T
?
e(g ,T/h) =1
G
T
Finally,theproofπ=({C } ,{C } ,C ,C ,π ,π ,{π } ,
? j=1,...,8 W j=0,...,4 X ? ? X W j=1,...,3
j j i i,W j
π ).
?54 CHAPTER 5. Optimization of block-wise P-signatures
?
BWPEqCommProve(params,m,open,open). Takentwoopensopen andopen ,two
X Y
commitmentsC andC canberespectively computedbyC =GSCom(X,open )
X Y X X
and C =GSCom(Y, openY). To prove X =Y, we can construct an non-interactive
Y
zero-knowledge proof C ·C =1 based on SXDH assumption.
X Y G
T
The result after optimization
Figure5.2: ElementsusedinG andG ofourproposedoptimizedblock-wiseP-signatures
1 2
Function elements inG elements inG
1 2
F?signatures
KeyGen g h
n
Sign g,U ,{g} h,u
0 i
1
n
Verify g,U ,U ,Ω,{g} ,? ,? h,A,u,? ,? ,? ,? ,?
0 1 i 21 4 1 22 3 5 6
1
n
WitGen?EQ - {h}
i
1
n
WitGen?EQ g h,h ,{h}
2n i
1
n n
WitGen?IP - {h} ,{W}
i i
1 1
n n
WitGen?IP g h,h ,{h} ,{W}
2n i i
1 1
WitVerify?EQ g,g ,g ? ,h ,W
1 i 6 n
WitVerify?EQ g ,g ,g ,g ,? ,W h,h ,W ,W ,W ,W
1 i n 2n 6 0 n+1?i 1 2 3 4
n
WitVerify?IP g,{g} ? ,W
i 6
1
n
WitVerify?IP g ,g ,g ,{g} ,W h,? ,W ,W ,W ,W
1 i 2n i 0 6 1 2 3 4
1
Let us examine the di?erence between our proposed two block-wise P-signatures.
Please compare Figure 4.1 and Figure 5.2, which collect elements used in two group G
1
and G respectively. The ﬁrst observation is that these two schemes use the same group
2
elements, whichmeans thefundamental ideaof asymmetric-based block-wiseP-signatures
remains unchanged and hence our optimization may not jeopardize the security level of
our proposed scheme. Secondly, it is also clear that the optimized block-wise P-signatures
dispatch more elements of signature set ? = (? , ? , ? , ? , ? , ? , ? ) and witness set
1 21 22 3 4 5 6
W = (W , W , W , W , W ) to groupG while comparing with the naive porting version
0 1 2 3 4 2
of block-wise P-signatures introduced in last chapter. The advantage of this modiﬁcation
is that while doing veriﬁcation procedure, we can construct maximal repeated pattern of
ﬁxed left-hand side argument in pairing computation, which can be pre-computed in im-
plementation. Lastly, our modiﬁcation moves the dynamic elements such as ? and W to
the group G of pairing computation, which can hence get the beneﬁt of relatively small
2
ﬁeld computation E(F ) while comparing to E(F k) of groupG computation.
q 1
q
In our modiﬁcation, we are also interested in knowing how many repeated pairing
patterns we can have to do pairing pre-computation. Figure 5.3 collects all the repeated
appearance of pairing form after the optimization. In the ﬁrst view of this table, it is
clear that except for WitVerify?IP, all veriﬁcation procedure can get beneﬁt from the5.1. OPTIMIZATION OF OUR PROPOSED BLOCK-WISE P-SIGNATURE 55
Figure 5.3: Collection of repeated pairing forms in block-wise P-signatures before/after
optimization
Function Pairing form # before optimization # after optimization
Verify e(g,·) 1 4
e(? ,·) 1 4
21
WitVerify?EQ e(g,·) 0 1
e(g ,·) 1 2(Max)
1
WitVerify?EQ e(g,·) 0 2
e(g ,·) 1 5(Max)
1
e(g ,·) 0 2(Max)
n
WitVerify?IP e(g,·) 0 1
WitVerify?IP e(g,·) 0 2
e(g ,·) 1 3
1
SigVerify ?EQ e(g,·) 1 8
1
e(? ,·) 1 4
21
e(g ,·) 0 2(Max)
1
e(g ,·) 0 2(Max)
n
SigVerify ?EQ e(g,·) 1 7
1
e(? ,·) 1 4
21
e(g ,·) 1 3
1
e(g ,·) 0 2
n
SigVerify ?EQ e(g,·) 2 7
2
e(? ,·) 1 4
21
e(g ,·) 1 2(Max)
n
SigVerify ?EQ e(g,·) 2 10
2
e(? ,·) 1 4
21
e(g ,·) 1 4(Max)
1
e(g ,·) 0 2
n
SigVerify ?IP e(g,·) 1 5
2
e(? ,·) 1 4
21
SigVerify ?IP e(g,·) 2 8
2
e(? ,·) 1 4
21
e(g ,·) 1 2
1
optimization. Itis desired to notice that thenumberof pairingforme(g,·) is dramatically
increased, which indirectly illustrates the advantage of our optimization on asymmetric
pairing based block-wise P-signatures. Other pairing forms such as e(g ,·), e(g ,·) and
1 n
e(? are also gain the beneﬁt from our optimization. In short, these repeated pairing
21
pattern can be precomputed and speed up the computation of our optimized block-wise56 CHAPTER 5. Optimization of block-wise P-signatures
P-signature scheme.
5.1.1 Security consideration of optimized P-signatures
To optimize the proposed block-wise P-signatures we have signiﬁcantly readjusted the
relative position of group elements in G andG . It is necessary to examine whether the
1 2
modiﬁed block-wise P-signature scheme is still secure against forgery attack.
Figure 5.4: Security reduction from asymmetric pairings P-signatures to optimized P-
signatures
In Section 4.2 we deﬁnethe security assumption of q?XHSDH problem, FlexXDH
problem and n?XFDHE problem for asymmetric pairings and all these three security
are essentially extended from q?HSDH problem, FlexDH problem and n?FDHE
problemofsinglegroupGinto asymmetricpairinggroupsG andG . Withthesesecurity
1 2
assumption we can reduce the security of our proposed block-wise P-signatures to q?
XHSDH problem, FlexXDH problem and n?XFDHE problem.
In terms of our optimization on block-wise P-signatures, we also need to carefully
examine if our modiﬁcation jeopardize the security. Please refer to 5.4, it is necessary to
examine whether the security assumption of q?XHSDH problem, FlexXDH problem
and n?XFDHE problem still works in our optimized block-wise P-signatures. Firstly,
the deﬁned q?XHSDH problem are essentially simultaneously running the q?HSDH
1/(?+c) c c
with generator g? G and generator h? G and try to ﬁnd a tuple (g , g , u ,
1 2
1
c c
1/(?+c) c c 1/(?+c ) c i 1/(?+c ) c i ?
i i i i
h , h , u ) given (g , g , u ) and (h , h , u ) where c ? Z . This
i
2 p
1 2
security assumption is essentially symmetric except for the underlying group elements g,
u , h, and u ; in other words, the exponential argument ? and c are the same. Such
1 2 i
deﬁnition give us convenience to transfer one secret from group G to group G . For
1 2
example, please refer to ﬁrst equation in Figure 5.1.
e(?,h) =e(Ω·? ,? )before optimization (5.16)
21 1
e(g,?) =e(Ω·? ,? )after optimization
21 15.2. EFFICIENCY OF OPTIMIZED BLOCK-WISE P-SIGNATURES 57
? ? ?
Our modiﬁcation move the ﬁxed argument ? from e(? =g ,h) = e(g,h) to e(g,? =h )
?
=e(g,h) . Thisexampleisamodeltechniqueweusedtooptimizeblock-wiseP-signature.
It is clear that such the modiﬁcation will not change the fundamental idea of deﬁned
security assumption, but simply adjust the argument form one group to the other group.
Therefore, q?XHSDH problem still works in our modiﬁcation. Similarly, FlexXDH
problem and n?XFDHE also show the same case as q?XHSDH, which adjust the
exponent argument from one group to the other group. With this observation we can
conclude that q?XHSDH problem, FlexXDH problem and n?XFDHE problem are
still suitable for the optimized block-wise P-signatures.
Theorem 5.1. The optimized asymmetric block-wise P-signatures are secure on the hard-
ness of q-XHSDH problem, FlexXDH problem and n-XFDHE problem.
Proof sketch. Theoptimized block-wise P-signature can beproven secure against all
three types of forgery attacks. Theprove can beslightly modiﬁed from the original proofs
provided by [4] and hence we will omit the proofs here. In this way, the reduction proof
of right-hand side of Figure 5.4 can be constructed.
5.2 E?ciency of optimized block-wise P-signatures
In this section we evaluate how much beneﬁt the optimization can gain in block-wise P-
signatures. Let us examine the theoretical analysis between asymmetric pairing based
block-wise P-signatures without optimization and one with optimization. Please refer to
Figure 5.5, The ﬁrst observation is that our optimization do not decrease used group
elements in G and G even though Our modiﬁcation on the proposed block-wise P-
1 2
IP IP
signaturesishuge. Secondlyinthewitnessgeneration ofcaseR=R andcaseR=R
which take the most number of group elements among all cases, we transfer the cost from
group G to group G , which can hence get beneﬁt from the small ﬁeld computation.
1 2
Overall the result is acceptable because our optimization focuses on alignment of pairing
arguments and does not increase or decrease group elements. Therefore, from the view of
theoretical analysis the performance enhancement is relatively small while comparing the
improvement from portingblock-wise P-signature from symmetric pairings to asymmetric
pairings.
5.2.1 Pairing pre-computation in MIRACL library
Fortunately MIRACL library has supported a variety of optimization techniques for pair-
ings computation, which are described as follows.
1. Poweringpre-computationofbilinearpairings. Thisfunctionsupportspre-computation
of ﬁxed arguments X? G and Y ? G in pairing computation e(X,Y), so that
1 2
z ?
e(X,Y) can be sped up for some z?Z . One can use the function to pre-compute
p
and store the value
precomp for power(X,Y) (5.17)58 CHAPTER 5. Optimization of block-wise P-signatures
Figure 5.5: Comparison of used group elements before/after optimization – F-signature
part
Function BWPS before optimization BWPS after optimization
(# inG ) (# inG ) (# in G ) (# inG )
1 2 1 2
F?signatures
KeyGen 1 1 1 1
Sign n+2 2 n+2 2
Verify n+8 6 n+7 7
WitGen?EQ n 0 0 n
WitGen?EQ n+2 1 1 n+2
WitGen?IP 2n 0 0 2n
WitGen?IP 2n+2 1 1 2n+2
WitVerify?EQ 3 3 3 3
WitVerify?EQ 7 6 7 6
WitVerify?IP 2 n+1 n+1 2
WitVerify?IP 6 n+4 n+4 6
2. Multiplication pre-computation of group elements. This function supports multiplica-
tion pre-computation of element X?G or elements Y?G in element multiplica-
1 2
z z ?
tion, so that X or Y can be sped up for some z?Z . One can use the function to
p
pre-compute and store the value
precomp for mult(X) (5.18)
precomp for mult(Y)
3. Pairing pre-computation of group elements. This function supports pre-computation
of ﬁxed arguments X? G in pairing computation e(X,·), so that e(X,Y) can be
1
sped up for some Y?G . One can use function to pre-compute and store the value
2
for pairing(X) (5.19)
precomp
4. Fast multiple pairing products technique. This function speeds up multiple pairing
products by sharing the same Miller variable and ﬁnal exponentiation. One can use
the following function to compute result
multi pairing(CollectionX, CollectionY) (5.20)
In our implementation, the ﬁrst pre-computation technique provided MIRACL library
can less beneﬁt on our optimized scheme since block-wise P-signatures simply contain
one powering computation of bilinear pairings. Also there is no computation of multiple
pairingproductinblock-wiseP-signatures. Therefore,wemainlyadoptthesecondandthe
third pre-computation provided by MIRACL library to speed up block-wise P-signatures.5.2. EFFICIENCY OF OPTIMIZED BLOCK-WISE P-SIGNATURES 59
Thedetailed experiment results are collected in Appendix A.2 and AppendixA.3, and
the standard deviation of our experiments show negligibly small for the performance of
block-wise P-signatures of naive Type-3 pairing porting and performance of optimized
block-wise P-signatures to be evidently distinguished.
Figure 5.6: E?ciency comparison of block-wise P-signatures without/with optimization
(using pairing curve BN-128)
ID Function BWPS in Type-3 without BWPS in Type-3 with Improvement (%)
optimization(/sec.) optimization (/sec.)
F?signatures
1 Sign 0.0492 0.0302 38.61
2 Verify 0.7039 0.6554 6.89
3 WitGen?EQ 0.009 0.0041 54.44
4 WitGen?EQ 0.0492 0.0114 19.14
5 WitGen?IP 0.0101 0.0048 52.47
6 WitGen?IP 0.0174 0.0131 24.71
7 WitVerify?EQ 0.2331 0.212 9.05
8 WitVerify?EQ 0.6985 0.6086 12.87
9 WitVerify?IP 0.1564 0.1501 4.02
10 WitVerify?IP 0.6931 0.6191 10.67
SigProve
1
11 SigProve ?EQ 4.6203 4.4409 3.88
1
12 SigProve ?EQ 6.0987 5.882 3.55
1
13 SigVerify ?EQ 13.4915 13.2608 1.70
1
EQ 18.4456 17.5681 4.75
14 SigVerify ?
1
SigProve
2
15 SigProve ?EQ 4.1008 3.9838 2.85
2
16 SigProve ?EQ 6.1149 5.8713 3.98
2
17 SigProve ?IP 3.5716 3.4304 3.95
2
18 SigProve ?IP 6.4235 6.1146 4.80
2
19 SigVerify ?EQ 12.1482 11.8556 2.40
2
EQ 18.4185 17.5311 4.81
20 SigVerify ?
2
21 SigVerify ?IP 10.7983 10.4557 3.17
2
22 SigVerify ?IP 18.8304 17.994 4.44
2
5.2.2 Experiment result.
Please refer to Figure 5.6, the data are collected from 20 runs of experiment with single
blockofmessage. Thisﬁgureillustrateshowtheoptimization a?ectthee?ciencyofblock-60 CHAPTER 5. Optimization of block-wise P-signatures
wise P-signatures, which can be roughly divided into two part: F-unforgeable signatures
and signature proof generation and veriﬁcation.
Firstly let us examine the performance of optimization in F-unforgeable signatures.
Overall it is clear that e?ciency enhancement depends on how large the proportion of
function codes can be precomputed. For the signature generation, it is evident that three
of seven equations in the algorithm can be sped up by pre-computing multiplication of
group elements g and h, which is expected to receive 42.85%’s improvement in e?ciency.
Our experiment shows 38.61%’s enhancement, which is consistent to the expected value.
In other words, the result implicitly shows the performance of pre-computing elements
multiplication can show a positive relation with the proportion of codes that can be pre-
computed. Intermsofsignatureveriﬁcation,ourrevisedschemepossessﬁveofninepairing
computation can besped up by the pre-computation of e(g,·), which approximately 41.66
%’simprovement ine?ciency. However, ourexperimentcanonly getabout7%’s improve-
ment, whichillustratesthattheﬁxedargumentpre-computationcannotprovideconsistent
percentage while comparing with expected improvement.
Next let us consider the performance of witness generation and veriﬁcation. For sig-
EQ IP
nature generation of casesR=R andR=R , the results show half improvement in
e?ciency. Essentially the enormous improvement also depends on the the proportion of
precomputed codes; hence in our experiment with only one message block, the improve-
ment is expected to receive half improvement in running time. The other two cases,
EQ IP
R=R andR=R , also presents about 20%’s enhancement in e?ciency. However, the
receiving e?ciency of these two cases will decrease with theincrease of message blocks. In
terms of witness veriﬁcation, the performance of optimization is low. The experiment re-
EQ EQ IP
sultshowsapproximately10%’simprovementinthecasesR=R ,R=R andR=R ,
IP
however, there is only 4% in the case ofR=R . This phenomenon again supports the
statement that pairing pre-compution of ﬁxed argument can provides lower gain in e?-
ciency enhancement.
Lastly in terms of signature proof generation and veriﬁcation, none of all cases in
our experiment can get e?ciency beneﬁt over 5%, which cannot regarded as a desirable
performance. ThesituationmayresultfromthecomplexityofGroth-Sahaiproofs. Firstly,
Groth-Sahai commitments essentially is an processof encryption, whichmeans they needs
tousefreshrandomvaluetoconceal theelementtobecommitted andleaves lessspacefor
pairingpre-computation. Secondly,theveriﬁcationofGroth-Sahaiproofsrequirehundreds
ofpairingcomputationandthegroupelementsinvolvedinpairingcomputationareusually
unshown during the veriﬁcation procedure. These two unfavorable factors result in less
e?ciency gain in signature proof generation and veriﬁcation of block-wise P-signatures.
In summary, our optimization in block-wise P-signatures receive signiﬁcant perfor-
mance in F-signatures part, and signature proof generation and veriﬁcation can get less
e?ciency enhancement in our optimization.5.3. OTHER PRACTICAL EFFICIENCY ANALYSIS OF BLOCK P-SIGNATURES61
5.3 Other practical e?ciency analysis of block P-signatures
Inlastsection wefocusonevaluatingtheperformanceofapplyingoptimization techniques
inourrevisedblock-wiseP-signatures. AlltheexperimentdataarecollectedonBNcurves;
however, it is desirable to know the performance of block-wise P-signature on di?erent
pairing curves. In this section, we discuss and compare how the di?erent pairing curves
a?ect the performance of block-wise P-signatures.
5.3.1 E?ciency analysis on di?erent pairing curves
Thechoice ofpairingcurveis alsoregardedas animportantissueforpairingcomputation.
Due to the unique design of di?erent pairing curves, the performance of pairing computa-
tion can present unique result. In this section we try to examine how the di?erent pairing
curves a?ect the performance of block-wise P-signatures. Here the experiment is simpli-
EQ
ﬁed and mainly focus on measuring the performance of caseR =R of F-unforgeable
signatures among di?erent pairing curves. In terms of pairing curves, we adopt CP-80,
MNT-80, BN-128, KSS-192, BLS-256, which left-hand side of the notation is the curve
name, and right-hand side represents the security degree. The code of F-unforgeable sig-
natures we adopted is optimized and contains pairing pre-computation. Moreover, we
increase the number of repeating experiment to 100 and extend the message to 20 blocks,
which can further increase the precision of this experiment. The detailed experiment re-
sults are collected in Appendix A.4, and the standard deviation of our experiments show
negligibly small for the performance of block-wise P-signatures on di?erent pairing curves
to be evidently distinguished.
From a general view, please refer to Figure 5.7, it is interesting that running time of
signature veriﬁcation and witness veriﬁcation is increasing with the raise of security de-
gree; however, performance of signature generation and witness generation is close among
di?erent curves with di?erent security degree. As we have understood, signature veri-
ﬁcation and witness veriﬁcation comprise pairing computation that can only get a little
beneﬁtfrompairingpre-computation; therefore, itisnotsurprisingthatthepairingcurves
with higher security degree will take more time on pairing computation. Moreover, there
are two remarkable points showing in this comparison. Please refer to Figure 5.8, ﬁrstly
it is noticeable that CP-80 take less time doing veriﬁcation than MNT-80, which shows
CP-80 take more advantage than MNT-80 on pairing computation of same security de-
gree. Secondly there is a small increase from CP-80 to BN-128; however, the running
time dramatically increase from BN-128 to BLS-256, which illustrate that BN-128 shows
signiﬁcant performance in pairing computation.
In terms of signature generation and witness generation, the experiment result is im-
pressing. Firstly no matter what pairing curves and security degree we adopt, all these
ﬁve pairing curves present excellent performance. In F-unforgeable signatures, signature
generation andwitness generation compriseaseries ofmultiplication of groupelements on
elliptic curves; hencetheexperimentresultshowsthatall ﬁvepairingcurvesshowremark-
able performance on multiplication on curve points. In spite of high performance of all62 CHAPTER 5. Optimization of block-wise P-signatures
Figure 5.7: E?ciency comparison among di?erent pairing curves - F-signatures part
pairing curves, there are still two noticeable points. Please refer to Figure 5.8 which give
the detailed data of this experiment, the ﬁrst point is that MNT-80 perform better than
CP-80 in signature generation and witness generation, which is di?erent from the result
of signature veriﬁcation and witness veriﬁcation. This phenomenon illustrates that MNT
curve is better at doing pointmultiplication than CP curve. Thesecond point is that BN-
128 presents the best performance in signature generation and witness generation, even
better than CP-80 and MNT-80 with lower security degree. This result implicitly suggest
that BN curves possesses tremendous e?ciency in doing point multiplication.
In short our experiment provide a reference for application developers to choose which
curves is better for their applications. Considering the security requirement, most cryp-
tographic products require at least AES-128; hence BN-128 can be an appropriate choice.
If applications focus on computational performance and only need lower security degree,
developers can evaluate their applications’ requirement and choose CP-80 or MNT-80. In
practical situation, signature veriﬁcation can be operated many times and there is only
one signature generation; hence in this situation CP-80 can provide better performance
than MNT-80.
5.3.2 Further e?ciency analysis on BN curves
In this section we would like to analyze the performanceof BN curves of di?erent security
degree. From the experiment result of BN-128 we have understood that BN curves show5.3. OTHER PRACTICAL EFFICIENCY ANALYSIS OF BLOCK P-SIGNATURES63
Figure 5.8: Detailed data of e?ciency comparison among di?erent pairing curves - F-
signatures part
Function CP-80 MNT-80 BN-128 KSS-192 BLS-256
Sign 0.077 0.047 0.04 0.118 0.2774
Verify 0.2003 0.4333 0.7785 3.6986 6.9683
WitGen?EQ 0.0351 0.0289 0.0189 0.0668 0.1932
WitVerify?EQ 0.132 0.3357 0.7316 3.5669 6.7946
well balanceonsecuritydegreeandperformanceine?ciency. Essentially MIRACLlibrary
allows BN curves being built for the security degree of AES-128 and AES-192, which
inspires us to measure the performance of BN curves of these two security degrees. To
facilitate the comparison between these two curve settings, we set the same experiment
parameters as the environment we set for block-wise P-signatures: 20 runsof one message
block. Please see the experiment result in Figure 5.9.
Firstly let us consider the result of F-signatures part of block-wise P-signatures in
di?erent security degree. Please refer to Figure 5.10, the result indicates that in the sig-
nature generation and witness generation, BN-192 setting present competitive e?ciency,
which means these operations can be computed in a fairly short time. However, in terms
of signature veriﬁcation and witness veriﬁcation, the running time of BN-192 setting dra-
EQ IP
matically increase. It is remarkable that in the caseR=R andR=R of SigVerify ,
2
the veriﬁcation procedures take roughly one second, which is acceptable for the majority
of applications; but, the others operations arise to nearly 3.5 seconds, which is a signiﬁ-
cant di?erence while comparing to BN-128-setting. In short, for the F-signatures part of
block-wise P-signatures, BN-192 setting present an acceptable result.
Secondly weexamine the resultof signature proofgeneration and veriﬁcation of block-
wise P-signatures. Please refer to Figure 5.11, it is clear that signature proof generation
and veriﬁcation take terribly long time to complete the computation. Roughly the data
can be divided into two parts, signature proof generation (Function ID 11, 12, 15, 16,
17, 18) and signature proof veriﬁcation (Function ID 13, 14, 19, 20, 21, 22). The proof
generation part can be done in 40 seconds while the proof veriﬁcation part take up to 90
seconds. Comparing to BN-128 setting, BN-192 setting cannot be regards to a nice choice
for constructing block-wise P-signatures.
Finally letuscomparethee?ciency improvementofpre-computation between BN-128
setting and BN-196 setting. Please refer to Figure 5.12, it is surprising that the e?ciency
improvement present consistently decline in BN-192 setting while comparing to BN-128
setting. This phenomenon illustrates that the pre-computation for both element multipli-
cation and pairing computation in security degree of AES-128 can take more advantage
than in AES-192. It is reasonable to suppose that the cause comes from the unique prop-
erty of BN curve, and may not happen on other pairing curves.64 CHAPTER 5. Optimization of block-wise P-signatures
Figure 5.9: E?ciency comparison of block-wise P-signature without/with optimization
(using pairing curve BN-192)
ID Function BWP in Type-3 without BWP in Type-3 with Improvement
optimization(/sec.) optimization (/sec.) (%)
F?signatures
1 Sign 0.3253 0.2164 33.47
2 Verify 3.6861 3.4822 5.53
3 WitGen?EQ 0.051 0.028 45.09
4 WitGen?EQ 0.0868 0.0735 15.32
5 WitGen?IP 0.0484 0.0239 50.61
6 WitGen?IP 0.1065 0.0811 23.84
7 WitVerify?EQ 1.2265 1.1321 7.69
8 WitVerify?EQ 3.5844 3.2391 9.63
9 WitVerify?IP 0.7813 0.7667 1.86
10 WitVerify?IP 3.5371 3.2696 7.56
SigProve
1
11 SigProve ?EQ 26.6617 25.9066 2.83
1
12 SigProve ?EQ 34.3566 33.4852 2.53
1
13 SigVerify ?EQ 68.8043 67.2217 2.30
1
14 SigVerify ?EQ 90.8369 88.7359 2.31
1
SigProve
2
15 SigProve ?EQ 23.8078 23.3271 2.01
2
16 SigProve ?EQ 34.4066 33.6923 2.07
2
17 SigProve ?IP 19.5668 18.8773 3.52
2
18 SigProve ?IP 35.1501 34.0464 3.13
2
19 SigVerify ?EQ 61.4989 60.8401 1.07
2
20 SigVerify ?EQ 91.4734 89.4296 2.23
2
21 SigVerify ?IP 52.7504 51.6206 2.14
2
22 SigVerify ?IP 94.3742 91.279 3.27
25.3. OTHER PRACTICAL EFFICIENCY ANALYSIS OF BLOCK P-SIGNATURES65
Figure5.10: Performancecomparisonofblock-wiseP-signaturesonpairingcurvesBN-128
and BN-196 - F-signatures part (please refer x-axis to the ID shows in Figure 5.9)
Figure5.11: Performancecomparisonofblock-wiseP-signaturesonpairingcurvesBN-128
and BN-196 - whole part (please refer x-axis to the ID shows in Figure 5.9)66 CHAPTER 5. Optimization of block-wise P-signatures
Figure 5.12: Comparison of e?ciency enhancement between block-wise P-signatures in
pairing curves BN-128 and BN-196 (please refer x-axis to the ID shows in Figure 5.9)Chapter 6
Conclusions
In this dissertation we make an comprehensive analysis on block-wise P-signatures from
a variety of e?ciency perspectives. For the theoretical e?ciency analysis of block-wise
P-signatures, we proposed the ﬁrst block-wise P-signature scheme based on asymmetric
pairings, whichistheoretically regardedtopossesse?ciencyadvantage over onesbasedon
symmetric pairings. Moreover, ourproposedblock-wise P-signatures can beproven secure
on the assumptions of q-XHSDH problem, Flex-XDH problem and n-XFDHE problem,
which are ﬁrstly proposed in our works. Comparing with ordinary block-wise [4] intro-
duced by Izabach`ene et al, our proposed scheme can provide competitive e?ciency in
group elements used in signature generation and veriﬁcation; furthermore, our proposed
scheme can signiﬁcantly reduce used group elements in signature proofs generation and
veriﬁcation.
In terms of practical implementation, to verify the correctness of our proposed scheme
andevaluatetheperformancedi?erencebetweenourdesignsandIzabach`eneetal.’sworks.
1
We both ﬁrstly implement block-wise P-signatures based on symmetric pairings . and
2
ones based on asymmetric pairings . Our proposed block-wise P-signatures can get 79%-
85%’s e?ciency improvement on signature generation and witness generation, as well
as 41%-45%’s e?ciency enhancement on signature veriﬁcation and witness veriﬁcation.
Moreover, the signature proof generation and veriﬁcation based on SXDH construction
can get get nearly 93%-97%’s improvement over ones based on DLIN construction.
In spite of enormous e?ciency improvement of our proposed block-wise p-signatures,
we further seek for higher e?ciency enhancement by applying optimization techniques in
our proposed schemes. Comparing with our proposed schemes, the optimized block-wise
P-signatures can 19%-52%’s improvement on signature generation and witness genera-
tion while signature veriﬁcation and witness veriﬁcation can hence get 4%-12%’ e?ciency
enhancement. Moreover, signature proof generation and veriﬁcation can get beneﬁt of
1%-4%’s e?ciency improvement.
1
Type-1 pairings in speciﬁc is adopted and signature proof generation and veriﬁcation adopt DLIN-
based Groth-Sahai proof systems.
2
Type-3 pairings in speciﬁc is adopted and signature proof generation and veriﬁcation adopt SXDH-
based Groth-Sahai proof systems.
6768 CHAPTER 8. CONCLUSIONS
Finally, we evaluate the performance of block-wise P-signatures on di?erent pairing
curves and di?erent security degree. In short, Barreto-Naehrig (BN) curve presents well
balance both in fast pairing computation and acceptable security degree for the imple-
mentation of block-wise P-signatures.
In conclusion, our proposed block-wise P-signatures can bring signiﬁcant e?ciency
beneﬁt to the research of P-signatures; moreover, the e?ciency analysis on block-wise P-
signatures canalso bethereferencefortheimplementation ofpairing-basedcryptographic
applications.
6.1 Future work of block-wise P-signatures
Block-wiseP-signaturesarerelativelycomplexdigitalsignaturessincetheycombineavari-
etyofcryptographicprimitives,includingdigitalsignatures,attribute-basedcryptographic
primitives, predicate cryptographic primitives and non-interactive zero-knowledge proofs.
Althoughourproposedblock-wiseP-signatureswithoptimizationhavereceivedsigniﬁcant
progress on improving e?ciency of them, there aretwo possibleresearch directions for the
future works.
E?ciency improvement of signature proofs veriﬁcation
Figure 6.1: Number of pairings computation per proof veriﬁcation, where n and m stand
for the number of di?erent types of variables. [5]
proof equation Naive veriﬁcation Batch veriﬁcation
SXDH
Pairing product equation 5m+3n+16 m+2n+8
Multi-scalar multiplication equation inG 8m+2n+14 min(2n+9, 2m+n+7)
1
Multi-scalar multiplication equation inG 8n+2m+14 min(2m+9, 2n+m+7)
2
Quadratic equation 8m+8n+12 2 min(m,n)+8
SXDH
Pairing product equation 12n+27 3n+6
Multi-scalar multiplication equation inG 9n+12m+27 3n+3m+6
Quadratic equation 18n+24 3n+6
Observingthee?ciency of ourproposedblock-wise P-signatures, itis evident that sig-
nature proofs generation and veriﬁcation still take long time to complete the procedures,
3
especially on the signature proofs veriﬁcation. To improve the performance of signature
proofs generation and veriﬁcation, it is clear that we should fundamentally improve the
3
Please refer to Figure 4.4 and Figure 4.56.1. FUTURE WORK OF BLOCK-WISE P-SIGNATURES 69
performance of Groth-Sahai proof systems. Recently Blazy et al. [5] introduced the tech-
nique that doing batch veriﬁcation of Groth-Sahai proofs, which can enormously decrease
the number of pairing computation. Please see the performance enhancement of batch
veriﬁcation in Figure 6.1. The techniques batch veriﬁcation adopt are three: Moving
the exponent into pairing computation, Moving the product into pairing computation,
and Switching the product. In other words, the batch veriﬁcation should rearrange the
equations ofsignatureproofveriﬁcation ofblock-wiseP-signaturesbyusinggroupelement
multiplication, sothatthebatchveriﬁcationdramaticallydecreasesnecessarypairingcom-
putation. Infact, Izabach`ene etal. [4] also suggested to usethisbatch techniques on their
block-wise P-signatures and they expected to use less than 20 pairing computation to
ﬁnish one signature proof veriﬁcation procedure. Comparing with naive veriﬁcation, the
techniqueofbatchveriﬁcationindeedprovidesagreatsolutionforblock-wiseP-signatures.
Application of block-wise P-signatures
Block-wise P-signatures are proposed for achieving anonymous credentials systems, which
can be widely used in a variety of application domains: from large system applications
in cloud computing, to small devices such as mobile phones and Oyster cards. From our
experiment result, up to now it is evident that computing block-wise P-signatures still
require machines with powerful computation ability. Motivated by this observation, there
are two directions for the development of block-wise P-signatures. Firstly, considering
the required computing power of block-wise P-signatures, one can focus on constructing
proxyarchitecturestoalleviatethecomputationburdenforportabledevicessuchasmobile
phones. Anotherpossibleresearchdirectioncanfocusonthereconstructionoflight-weight
block-wise p-signatures, so that the new construction can be used in smart cards or other
devices without powerful computing ability.Bibliography
[1] Galbraith, S.D., Paterson, K.G., Smart, N.P.: Pairings for cryptographers. Discrete
Applied Mathematics 156(16) (2008) pp. 3113–3121
[2] Scott, M.: On the e?cient implementation of pairing-based protocols. In: Cryp-
tography and Coding - 13th IMA International Conference - IMACC 2011, Lecture
Notes in Computer Science vol. 7089, Springer-Verlag (2011) pp.296–308
[3] Groth, J., Sahai, A.: E?cient non-interactive proof systems for bilinear groups. In:
Advances in Cryptology - EUROCRYPT 2008, Lecture Notes in Computer Science
vol. 4965, Springer-Verlag (2008) pp.415–432
[4] Izabach`ene, M., Libert, B., Vergnaud, D.: Block-wise p-signatures and non-
interactive anonymous credentials with e?cient attributes. In: Cryptography and
Coding - 13th IMA International Conference - IMACC 2011, Lecture Notes in Com-
puter Science vol. 7089, Springer-Verlag (2011) pp.431–450
[5] Blazy, O., Fuchsbauer, G., Izabach`ene, M., Jambert, A., Sibert, H., Vergnaud, D.:
Batch groth-sahai. In: Applied Cryptography and Network Security - 8th Inter-
national Conference, ACNS 2010, Lecture Notes in Computer Science vol. 6123,
Springer-Verlag (2010) pp.218–235
[6] Chaum,D.: Securitywithoutidentiﬁcation: Transactionsystemstomakebigbrother
obsolete. Commun. ACM 28(10) (1985) pp. 1030–1044
[7] Damg˚ ard, I.: Payment systems and credential mechanisms with provable security
against abuse by individuals. In: Advances in Cryptology - CRYPTO 1988, Lecture
Notes in Computer Science vol. 403, Springer-Verlag (1988) pp.328–335
[8] Lysyanskaya, A., Rivest, R.L., Sahai, A., Wolf, S.: Pseudonym systems. In: Selected
Areas in Cryptography - SAC 1999, Lecture Notes in Computer Science vol. 1758,
Springer-Verlag (1999) pp.184–199
[9] Camenisch, J., Lysyanskaya, A.: An e?cient system for non-transferable anonymous
credentialswithoptionalanonymityrevocation. In: AdvancesinCryptology-EURO-
CRYPT 2001, Lecture Notes in Computer Science vol. 2045, Springer-Verlag (2001)
pp.93–118
70BIBLIOGRAPHY 71
[10] Camenisch, J., Herreweghen, E.V.: Design and implementation of the idemix anony-
mous credential system. In: ACM Conference on Computer and Communications
Security - CCS2002, ACM (2002) pp.21–30
[11] Camenisch, J., Lysyanskaya, A.: A signature scheme with e?cient protocols. In:
Security in Communication Networks, Third International Conference - SCN 2002,
Lecture Notes in Computer Science vol. 2576, Springer-Verlag (2002) pp.268–289
[12] Camenisch, J., Lysyanskaya, A.: Signature schemes and anonymous credentials from
bilinear maps. In: Advances in Cryptology - CRYPTO 2004, Lecture Notes in Com-
puter Science vol. 3152, Springer-Verlag (2004) pp.56–72
[13] Belenkiy, M., Chase, M., Kohlweiss, M., Lysyanskaya, A.: P-signatures and non-
interactive anonymous credentials. In: Theory of Cryptography, Fifth Theory of
Cryptography Conference - TCC2008, Lecture Notes in Computer Science vol. 4948,
Springer-Verlag (2008) pp.356–374
[14] Belenkiy, M., Chase, M., Kohlweiss, M., Lysyanskaya, A.: Compact e-cash and
simulatable vrfs revisited. In: Pairing-Based Cryptography - Pairing 2009, Lecture
Notes in Computer Science vol. 5671, Springer-Verlag (2009) pp.114–131
[15] Belenkiy, M., Camenisch, J., Chase, M., Kohlweiss, M., Lysyanskaya, A., Shacham,
H.: Randomizable proofs and delegatable anonymous credentials. In: Advances in
Cryptology -CRYPTO2009, LectureNotes inComputerSciencevol. 5677, Springer-
Verlag (2009) pp.108–125
[16] Goldreich, O., Micali, S., Wigderson, A.: Proofs that yield nothing but their validity
and a methodology of cryptographic protocol design (extended abstract). In: 27th
Annual Symposiumon Foundations of Computer Scienc - FOCS 86, IEEE Computer
Society (1986) pp.174–187
[17] Fiat, A., Shamir, A.: How to prove yourself: Practical solutions to identiﬁcation and
signature problems. In: Advances in Cryptology - CRYPTO 1986, Lecture Notes in
Computer Science vol. 263, Springer-Verlag (1986) pp.186–194
[18] Bellare, M., Rogaway, P.: Random oracles are practical: A paradigm for designing
e?cient protocols. In: ACM Conferenceon Computer and Communications Security,
Proceedings of the 1st ACM Conference on Computer and Communications Security
(1993) pp.62–73
[19] Goldwasser, S., Kalai, Y.T.: On the (in)security of the Fiat-Shamir paradigm. In:
44th SymposiumonFoundationsof ComputerScience-FOCS2003, IEEEComputer
Society (2003) pp.102–113
[20] Canetti, R., Goldreich, O., Halevi, S.: The random oracle methodology, revisited, J.
ACM, vol. 51 (2004) pp.557–59472 BIBLIOGRAPHY
[21] Camenisch,J.,Groß,T.: E?cientattributesforanonymouscredentials(extendedver-
sion). IACR Cryptology ePrint Archive http://eprint.iacr.org/2010/496 (2010)
pp.496
[22] Boneh, D., Boyen, X., Shacham, H.: Short group signatures. In: Advances in
Cryptology -CRYPTO2004, LectureNotes inComputerSciencevol. 3152, Springer-
Verlag (2004) pp.41–55
[23] Scott, M.: Authenticated id-based key exchange and remote log-in with simple token
and pin number. http://eprint.iacr.org/2002/164.pdf (2002)
[24] Boyen, X., Waters, B.: Full-domain subgroup hiding and constant-size group signa-
tures. In: Public Key Cryptography - PKC 2007, Lecture Notes in Computer Science
vol. 4450, Springer-Verlag (2007) pp.1–15
[25] Boneh, D., Gentry, C., Waters, B.: Collusion resistant broadcast encryption with
short ciphertexts and private keys. In: Advances in Cryptology - CRYPTO 2005,
Lecture Notes in Computer Science vol. 3621, Springer-Verlag (2005) pp.258–275
[26] NIST: Nist recommendation for key management part 1: General, nist special
publication. http://csrc.nist.gov/publications/nistpubs/800-57/SP800-57-
Part1.pdf (2005)
[27] Lenstra, A.K.: Handbook of Information Security. Volume 2. Wiley (2005)
[28] ECRYPT: Ecrypt yearly report on algorithms and keysizes.
http://www.ecrypt.eu.org/documents/D.SPA.10-1.1.pdf (2005)
[29] Scott, M.: Computing the tate pairing. In: The Cryptographers’ Track at the RSA
Conference - CT-RSA 2005, Lecture Notes in Computer Science vol. 3376, Springer-
Verlag (2005) pp.293–304
[30] Costello, C., Stebila, D.: Fixed argument pairings. In: Progress in Cryptology -
LATINCRYPT 2010, Lecture Notes in Computer Science vol. 6212, Springer-Verlag
(2010) pp.92–108
[31] Granger, R., Smart, N.P.: On computing products of pairings. IACR Cryptology
ePrint Archive http://eprint.iacr.org/2006/172 (2006) pp.172
[32] Ghadaﬁ, E.,Smart,N.P., Warinschi, B.: Groth-sahaiproofsrevisited. In: PublicKey
Cryptography, Lecture Notes in Computer Science vol. 6056, Springer-Verlag (2010)
pp.177–192
[33] Boneh, D., Boyen, X.: Short signatures without random oracles. In: Advances
in Cryptology - EUROCRYPT 2004, Lecture Notes in Computer Science vol. 3027,
Springer-Verlag (2004) pp.56–73BIBLIOGRAPHY 73
[34] Certivox: Miraclcryptosdk.http://certivox.com/index.php/solutions/miracl-
crypto-sdk/
[35] Blake, I.F., Seroussi, G., Smart, N.P.: Advances in Elliptic Curve Cryptography.
Volume 2. Cambridge University Express (2005)
[36] Miyaji, A., Nakabayashi, M., Takano, S.: New explicit conditions of elliptic curve
traces for fr-reduction. In: IEICE transactions on Fundamentals. Volume E84-A(5).
(2001) pp.1234–1243
[37] Barreto, P.S.L.M., Naehrig, M.: Pairing-friendly elliptic curves of prime order. In:
Selected Areas in Cryptography - SAC 2005, Lecture Notes in Computer Science vol.
3897, Springer-Verlag (2005) pp.319–331
[38] Kachisa, E.J., Schaefer, E.F., Scott, M.: Constructing brezing-weng pairing-friendly
ellipticcurvesusingelements inthecyclotomicﬁeld. In: Pairing-Based Cryptography
- Pairing 2008, Lecture Notes in Computer Science vol. 5209, Springer-Verlag (2008)
pp.126–135
[39] Barreto, P.S.L.M., Lynn, B., Scott, M.: Constructing elliptic curves with prescribed
embedding degrees. In: Security in Communication Networks, Third International
Conference-SCN2002, LectureNotesinComputerSciencevol.2576, Springer-Verlag
(2002) pp.257–267Appendix A
Experiment Results
A.1 ExperimentresultofType-1pairingbasedP-signatures
EQ
Figure A.1: Type-1 pairings - caseR=R
74A.1. EXPERIMENT RESULT OF TYPE-1 PAIRING BASED P-SIGNATURES 75
EQ
Figure A.2: Type-1 pairings - caseR=R
IP
Figure A.3: Type-1 pairings - caseR=R
IP
Figure A.4: Type-1 pairings - caseR=R76 APPENDIX A. EXPERIMENT RESULTS
A.2 ExperimentresultofType-3pairingbasedP-signatures
EQ
Figure A.5: Type-3 pairings - caseR=R
EQ
Figure A.6: Type-3 pairings - caseR=RA.2. EXPERIMENT RESULT OF TYPE-3 PAIRING BASED P-SIGNATURES 77
IP
Figure A.7: Type-3 pairings - caseR=R
IP
Figure A.8: Type-3 pairings - caseR=R78 APPENDIX A. EXPERIMENT RESULTS
A.3 Experiment result of Optimized P-signatures
EQ
Figure A.9: Optimized Type-3 pairings - caseR=R
EQ
Figure A.10: Optimized Type-3 pairings - caseR =RA.3. EXPERIMENT RESULT OF OPTIMIZED P-SIGNATURES 79
IP
Figure A.11: Optimized Type-3 pairings - caseR=R
IP
Figure A.12: Optimized Type-3 pairings - caseR=R80 APPENDIX A. EXPERIMENT RESULTS
A.4 Experiment result of P-signatures on di?erent curves
EQ
Figure A.13: CP-80 - caseR =R
EQ
Figure A.14: MNT-80 - caseR =RA.4. EXPERIMENT RESULT OF P-SIGNATURES ON DIFFERENT CURVES 81
EQ
Figure A.15: BN-128 - caseR=R
EQ
Figure A.16: KSS-192 - caseR =R
EQ
Figure A.17: BLS-256 - caseR =R